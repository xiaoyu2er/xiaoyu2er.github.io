<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoyu2er&#39;s blog</title>
  <subtitle>2016, 成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoyu2er.github.io/"/>
  <updated>2016-03-21T02:42:42.000Z</updated>
  <id>http://xiaoyu2er.github.io/</id>
  
  <author>
    <name>xiaoyu2er</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 资料整理 (持续更新)</title>
    <link href="http://xiaoyu2er.github.io/2016/03/21/awesome-webpack/"/>
    <id>http://xiaoyu2er.github.io/2016/03/21/awesome-webpack/</id>
    <published>2016-03-20T16:00:00.000Z</published>
    <updated>2016-03-21T02:42:42.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pan.baidu.com/s/1nug9U9j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack Fundamentals(视频系列教程)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/5630280260b27cc2b9e85406&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何使用 Webpack - webpack-howto (翻译)(Instagram)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VkTCL6Nqm6Y&amp;amp;feature=youtu.be&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配套视频, Instagram团队Peter-Hunt的分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MzVFrIAwwS8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频: Advanced Webpack (Lonely Planet的前端) 很多实用的技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002551952&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack 入门指迷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.oneapm.com/javascript/2015/07/07/webpack_performance_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack 性能优化 （一）(使用别名做重定向)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chemdemo/chemdemo.github.io/issues/10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于webpack搭建前端工程解决方案探索 (评论更精彩)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chemdemo/webpack-seed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-seed (一个基于webpack搭建的工程例子 很有借鉴意义 可以做到同时支持SPA和多页面型的项目) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003499526&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于webpack搭建前端工程解决方案探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004577578&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【前端构建】WebPack实例与前端性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003969465&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp + webpack 构建多页面前端项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请关注 &lt;a href=&quot;https://github.com/xiaoyu2er/awesome-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xiaoyu2er/awesome-webpack&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pan.baidu.com/s/1nug9U9j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack Fundamentals(视频系列教程)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://
    
    </summary>
    
    
      <category term="Webpack" scheme="http://xiaoyu2er.github.io/tags/Webpack/"/>
    
      <category term="前端工程化" scheme="http://xiaoyu2er.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Google 镜像站搜集(2016年3月26日更新)</title>
    <link href="http://xiaoyu2er.github.io/2016/03/16/google-mirror/"/>
    <id>http://xiaoyu2er.github.io/2016/03/16/google-mirror/</id>
    <published>2016-03-15T16:00:00.000Z</published>
    <updated>2016-03-26T01:32:58.000Z</updated>
    
    <content type="html">&lt;p&gt;自由的接触信息应该是每个人不可剥夺的基本人权.&lt;/p&gt;
&lt;p&gt;持续更新! 敬请关注! &lt;a href=&quot;https://github.com/xiaoyu2er/google-mirror-check&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google-mirror-check npm包已发布&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果您是以下镜像的作者, 且不希望出现在以下列表中，可以联系&lt;a href=&quot;mailto:zongyanqi@foxmail.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我&lt;/a&gt;移除链接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://google.casejs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://google.casejs.com/&lt;/a&gt; (887ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hao.cytbj.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hao.cytbj.com/&lt;/a&gt; (984ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ggss.cf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ggss.cf/&lt;/a&gt; (1207ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gc.ihuan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gc.ihuan.me/&lt;/a&gt; (1756ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rose.jgoproxy.tk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rose.jgoproxy.tk/&lt;/a&gt; (2356ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://soguge.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://soguge.com/&lt;/a&gt; (2403ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://s.8090st.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://s.8090st.com/&lt;/a&gt; (2751ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gg.kfd.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gg.kfd.me/&lt;/a&gt; (3242ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wen.lu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.wen.lu/&lt;/a&gt; (4378ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://go.cccyun.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://go.cccyun.cn/&lt;/a&gt; (4498ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ggg.eeload.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ggg.eeload.com/&lt;/a&gt; (4622ms)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jisuobuyu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jisuobuyu.com/&lt;/a&gt; (8455ms)&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自由的接触信息应该是每个人不可剥夺的基本人权.&lt;/p&gt;
&lt;p&gt;持续更新! 敬请关注! &lt;a href=&quot;https://github.com/xiaoyu2er/google-mirror-check&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;goog
    
    </summary>
    
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
      <category term="Google" scheme="http://xiaoyu2er.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>[转载]再谈百度：KPI、无人机，以及一个必须给父母看的案例</title>
    <link href="http://xiaoyu2er.github.io/2016/03/15/baidu-do-evil/"/>
    <id>http://xiaoyu2er.github.io/2016/03/15/baidu-do-evil/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2016-03-15T11:27:14.000Z</updated>
    
    <content type="html">&lt;p&gt;原文: &lt;a href=&quot;http://www.donews.com/idonews/article/8147.shtm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;再谈百度：KPI、无人机，以及一个必须给父母看的案例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2016年03月15日下午歪理邪说公众号发送如下消息:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/baidu-do-evil/wechat.jpg&quot; alt=&quot;wechat&quot;&gt;&lt;/p&gt;
&lt;p&gt;果不其然到晚上7点之前, 文章已经被人举报, 本想截取微信公众号的各种评论现在也不行了. 好在已经有很多网站转载了这篇文章.&lt;/p&gt;
&lt;p&gt;拒绝百度, 从我做起.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/baidu-do-evil/google.png&quot; alt=&quot;google&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面原文转载:&lt;/p&gt;
&lt;p&gt;再谈百度：KPI、无人机，以及一个必须给父母看的案例&lt;/p&gt;
&lt;p&gt;没想到我之前的一篇关于百度的文章引起了这么大的反馈。很多朋友称赞我写的好，实际上并非如此。我只是往一块顺着山坡向下滚的石头上踢了一脚而已。人们对于百度早就积累了太多年的怨气，我只是替大家说出来罢了。这篇文章总共收到了将近900条评论，而且还在继续增加中。可惜微信只能放出来50条精选评论，我真的很想把所有评论都放出来，里面有各种受骗的个人经历，有对我的鼓励，也有百度员工对我的各种指责。这篇文章除了讨论这些问题，还提供了一个具体案例，如果你懒得看这些理论，直接翻到后面有图的部分看吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315182243_67558.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;在我这篇文章之后，又引发了不少争论，非常令人高兴。当人们开始不约而同讨论一个问题的时候，说明它开始得到真正的重视了。这几天我看了很多文章，不少人有个疑问，就是百度的普通员工是否应该为此承担责任，毕竟他们只是一份工作。后台也有不少百度员工留言，反复告诉我，他们就是做一份工作，不觉得自己有什么责任。这确实是个有意思的问题。当百度员工说出来这不是我们的责任，这个责任要怪监管部门，而完全忽视各种假医院假药坑害了多少人的时候，当携程员工说我们只有万分之二的无票率，而完全忽视了携程每个月出票量高达数百万的时候，我们确实觉得挺奇怪，他们是真的理解不了实际情况是怎么样的吗?并不是，当活生生的人变成了数字的时候，就没有人在意实际情况了。&lt;/p&gt;
&lt;p&gt;所有公司都会用KPI做为考评指标，但在KPI驱动下，员工去做这些事的时候，他们到底有没有责任?这个问题不仅仅发生在企业上，而是一个历史悠久的问题，甚至可以说是人类根深蒂固的问题。2014年有一步非常火的科幻电影，叫做《安德的游戏》，讲的就是这个问题的极端表现。&lt;/p&gt;
&lt;p&gt;这部电影的主人公安德是高智商的天才少年，从小开始接受军事训练，进行一系列的模拟战争。在一次模拟战争的考试中，他使用了人类的终极武器“设备医生”，摧毁了敌人的一整颗星球，灭掉了敌人整个种族。但之后，他才知道那并不是一次模拟考试，而是真实的战争，他成了宇宙中前所未有的大屠杀者。电影中虽然也有这一幕，但弱化了原著中，安德得知实情之后的心理崩溃过程。&lt;/p&gt;
&lt;p&gt;《安德的游戏》小说原著于1985年，有着惊人的预言性，到今天，这种情况在人类的战场上已经真实发生，就是美国这些年投入战争的无人机。无人机飞行员坐在操作室里，无需身临战场，只需在美国的基地的控制台上操作，远在中东的无人机就可以猎杀武装分子。就连美国军方也忽视了这种行动对无人机操作员的心理影响，他们大概起初认为这会比战场上消灭敌人心理压力小很多。但实际上，无人机操作员几乎都出现了严重的心理问题。当然，这是两个非常极端的例子。我们的现实中是什么样呢?&lt;/p&gt;
&lt;p&gt;知乎上有人问过一个问题，是“按一下按钮你会获得 50 万同时有一个陌生人会死去，你会按吗?”，曾经有一个被顶了一万多次之后被折叠的答案，是：“某度已经在做了”。这个回答我估计是是指百度在医疗广告以及疾病相关贴吧管理上出的一系列问题。百度的员工们当然不同意这种看法，他们认为最终因病致残致死被骗的人跟他们没有直接关系，那是假医院的事情，至于为什么有假医院，那是政府的事情。他们只是做好自己的工作，完成自己的KPI而已。不应该受到指责。但实际上，在这些企业里面，KPI就像安德的游戏中的模拟训练，就像无人机的操作台。他们都是把一个人的具体行动和最终导致的后果隔离开的办法。KPI让人麻木，把人变成了巨大机器上的一个零件，无论机器导致了什么，每个零件都不会觉得自己是错的。&lt;/p&gt;
&lt;p&gt;上一篇文章里面，我说我会问认识的百度员工一个问题：：“你让你的父母日常使用什么搜索引擎，如何能确保他们不被骗?” 有人说我这是道德绑架。这当然不是道德绑架，人只有面对自己熟悉情境，才能看到事情的本来面目。这就好像是安德得知自己真的毁灭了一颗星球之后的心理崩溃，美国无人机操作员在长时间监视武装分子的日常生活之后的心理问题也是如此。KPI把人和现实情况隔绝开，我用这个问题把人们重新拉回现实，从而给他们一个场景，可以去仔细思考，我每天所做的工作是不是完全没问题。我相信如果能直面这个问题，一部分人会知道，他们做的是错的，对于这种情况，我的问题不能算道德绑架，因为确实帮助了他们思考这个问题。对于另外一部分人，坚持认为他们的做法没问题的，也算不上道德绑架——你怎么能用一个他根本没有的东西来绑架他呢?&lt;/p&gt;
&lt;p&gt;我在上一篇文章里面提到了，我抵制百度的一个具体措施是“禁止我的文章被发到百度百家”。我的一位朋友转我那篇文章到朋友圈的时候，百度百家的负责人陈磊先生对此非常不忿，觉得贴吧这事跟他没关系，为什么要抵制百度百家。最后还骂了我朋友一句没脑子，而且说把她记在自己的小黑本上了。这句话意义不明，可能是陈先生出门捡到一本死亡笔记，听起来挺吓人的。不过既然陈磊先生提了这个问题，正好我这篇文章就在讲间接责任问题，就用百度百家做个实际的例子吧，看看百度百家到底能把人引导去什么地方。&lt;/p&gt;
&lt;p&gt;先看第一张图，这是百度百家的文章页面，这篇文章是在今天的百家首页上直接点的。为了防止可能的其他Cookies干扰，我用了Chrome浏览器的匿名窗口模式，这样应该很公平。百度百家的模式是用流量换广告，然后和作者分成广告收益(来自《陈磊：我们为什么作百度百家》)。所以这个页面上四处都是广告。我用红色箭头标出来了一个广告，叫做“投资理财有哪些“。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315180757_59602.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;点进去之后我到了一个百度的搜索结果页面。这个页面上当然有不少广告，广告下面都带着蓝色的V，意思是认证过的广告主，看起来还挺正规。我们来看看第一个广告吧。还是请注意我用红色箭头标出的两个地方。上面一个箭头是这个广告的标题“绿地国际金融日化1.8%最高40%，100起投”，网址是 www.ddd1gz.com 下面一个箭头指向了广告主，是经过实名认证的，是“松阳县力帆投资咨询有限公司”。有点奇怪是不是?绿地集团应该没人不知道，是一家上海的房地产公司，非常著名。一家这样规模的集团，为什么会通过一个松阳县的公司在百度投放广告，而不是自己投放呢?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315180827_16984.jpg&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以我就点了这个广告，以便满足好奇心。这个广告点完之后，经过了两次跳转，最终到达了“&lt;a href=&quot;http://5673w.cn/”，而不是上图中在百度显示的网址&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://5673w.cn/”，而不是上图中在百度显示的网址&lt;/a&gt; www.ddd1gz.com 。这是为什么呢?我用curl命令拿到了 www.ddd1gz.com 的页面源码，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315180845_57339.jpg&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;p&gt;仍然注意我标红的地方。这段代码很有趣，它会根据当前用户的IP地址，判断用户所在的地区，如果用户在 北京、浙江、上海 这三个地区，就显示一个叫做index.html的页面，在这三个地区之外的地方，就会跳转到 5673w.cn 。我不在这三个地区，所以刚才看到的就是 5673w.cn。&lt;/p&gt;
&lt;p&gt;我们来看一下这两个页面分别是什么。&lt;/p&gt;
&lt;p&gt;北京上海浙江用户，看到的是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181011_50762.jpg&quot; alt=&quot;5&quot;&gt;&lt;/p&gt;
&lt;p&gt;其他地区，包括我，看到的 5673w.cn 是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181037_82439.jpg&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比这两个页面，很容易发现区别。北京上海浙江用户，看到的是百度所显示的认证广告主“松阳县力帆投资咨询有限公司”，这个页面只是关于这家公司的一些介绍，没什么实际功能。而其他地区的用户，看到的是一个理财网站，可以注册会员，还能看到滚动的各种用户已经投资的信息。我也是够无聊的，竟然注册了一个用户，注册了之后真的可以充值。右下角有个微信二维码，我扫了一下，是一个个人微信帐号。同时注册之后的微信充值，也是这个二维码。&lt;/p&gt;
&lt;p&gt;再点一下“关于我们”，可以看到公司的介绍。注意箭头标记的地方，它证明自己真实的办法是，让你去上海工商局，查“绿地金融投资控股集团有限公司”的注册情况。这家公司确实是存在的，但…你注意到左上角的LOGO和绿地集团是不一样的吗?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181103_33180.jpg&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;
&lt;p&gt;我用Google搜了绿地集团的官方网站，找到了他们的“联系我们“页面 &lt;a href=&quot;http://www.greenlandsc.com/Contact.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.greenlandsc.com/Contact.aspx&lt;/a&gt; 确实存在“绿地金融投资控股有限公司”，不过无论地址和电话都不是前面那个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181126_87599.jpg&quot; alt=&quot;8&quot;&gt;&lt;/p&gt;
&lt;p&gt;到这里大家都应该猜到了发生了什么，在百度投广告的是一个骗子公司，它们冒了绿地金融的名字，做了一个假网站。为什么这个假网站不让北京上海浙江三地的用户看?大概是觉得这三个地方的用户不好骗。(真糟糕，深圳广州珠三角、天津重庆成都武汉…你们看来都被划入好骗的队伍了)&lt;/p&gt;
&lt;p&gt;还有更有趣的，我写完这一段，又去百度刷新了一下刚才搜索“投资理财渠道”的结果页面，发现广告的顺序变了，排在第一的是“中银国际，1万元理财2个月变3万元，天天收入”，蓝V认证是“大冶市顺景商贸有限公司”，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181146_40310.jpg&quot; alt=&quot;9&quot;&gt;&lt;/p&gt;
&lt;p&gt;点进去看看…是下面这样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181202_79920.jpg&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;p&gt;跟前面那个“绿地金融投资控股有限公司”完全一样……你们都是从一家买的模板吗?&lt;/p&gt;
&lt;p&gt;我用Google搜了下“中银国际”，找到了一份“中銀國際控股有限公司”发出的“關於防範冒用中銀國際名義開展投資活動的聲明”。里面说了关于电话理财推销骗术的事，可能他们还不知道百度上这些事吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181223_99921.jpg&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的站不知道有多少，我真的就是随手翻翻，这么明显的，完全冒用著名企业名义的情况都不止一个，其他的问题还有多少?现在大家都注意到百度在医疗方面的问题，在其他方面的问题有多少呢?欢迎有兴趣的同学自己研究。&lt;/p&gt;
&lt;p&gt;对了，用百度搜中银国际的话，你猜猜排在最前面的是什么?看下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.donews.com/idonews/Upload/image/20160315/20160315181247_17413.jpg&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;p&gt;百度大概会说，你看，下面我明明标记了官网嘛，你非要点第一个链接，那是你自己的错。这种解释我是无话可说的。我只能继续呼吁，不要相信在百度上看到的东西。&lt;/p&gt;
&lt;p&gt;看完这个过程，这时候我的问题是：陈磊先生，您觉得我抵制百度百家的行为，有没有合理性?您觉得百度百家和百度的一系列作恶行为，有没有关联?&lt;/p&gt;
&lt;p&gt;借此机会，我再次呼吁各位自媒体作者们，请跟我一起抵制百度百家。这个逻辑非常容易想清楚，百度百家在你们的文章上投放广告，这些广告质量很差，随便点点就遇到了骗子。给百度百家提供内容，事实上就是给骗子提供了展示平台。还是用我之前的办法，想想你们的父母，哪天在百度搜索一下你们的名字，找到了百度百家，点过去想看看你写的文章，看完你的文章不留神点了下广告，去了这个假冒的理财网站，把养老金投进去了，这是你愿意看到的事情吗?何况，每一篇文章下面都推荐了百度新闻这个app，你要装了它，百度全家桶也就不请自到了…让喜欢你的读者在这样的地方看你的文章，太对不起他们了。&lt;/p&gt;
&lt;p&gt;发现这件事，只用了我不到10分钟的事情，随便点点就遇到了。我不知道陈磊先生有没有认真研究过自己负责的产品。无论怎么说，这么容易发现的问题，陈磊先生以及其他百度员工都没注意到，这是挺不可思议的。他们是有责任，还是没能力呢?无论是哪个原因，在百度把这些事情处理好之前，我觉得都应该抵制百度百家。何况，写文章的人，多少应该有点洁癖，怎么能容忍自己的文章上放满广告呢?应该处女座一点嘛。&lt;/p&gt;
&lt;p&gt;对了，陈磊先生2014年还跟和菜头有过一次争论，惹得和菜头写了一篇文章，质疑百度百家的模式。我放在阅读原文里面，点击即可阅读。&lt;/p&gt;
&lt;p&gt;我上一篇文章写到过，我对百度任何“改正”行为都不相信，因为他们已经改了10多年了。疾病相关的贴吧出了事情，他们马上改，但是你只要想找，随时能找到百度的各种问题。只是事情没闹大，你喊破喉咙也没人搭理你。我不知道现在这件事闹大了会怎么样，我当然希望百度尽快处理这个问题，毕竟多留一分钟，以百度的巨大流量，就会多不知道多少人受骗。为了防止百度改掉这个问题之后不承认它存在过，我通过可信的第三方存档服务刚才把所有涉及的页面都取证了，其中有一部分关键页面直接打包进了比特币的区块里面。如果百度觉得我造谣了，可以起诉我，我到时候会出示现在存档的所有证据。&lt;/p&gt;
&lt;p&gt;最后想说的就是，我知道很多人觉得自己只是打一份工，这个心态可以理解。我写下这篇文章，并不是逼迫你立刻辞职，只是希望你能冷静的想一想，这真的只是打一份工这么简单吗?除了到我的后台留言，说百度员工无辜，是不是还能做一点什么别的事情?&lt;/p&gt;
&lt;p&gt;我仍然是昨天哪些建议，告诉父母，千万不要相信百度搜出来的任何东西。可以给他们看看我这篇文章的后半截，看完这个案例，相信以后他们遇到这样的事情，会愿意找你确认一下，会更愿意相信你说的话。&lt;/p&gt;
&lt;p&gt;勿以恶小而为之，勿以善小而不为。&lt;/p&gt;
&lt;p&gt;最后，分享一段西乔对于百度的评论，我觉得总结非常精彩：“百度控制着普通人接触信息时代的入口，却把路标指向邪恶欺骗的世界。它让人们对互联网世界失去信任、对技术失去尊重、在使用这个时代最先进的知识/信息获取方式时感到恐惧。加剧了信息占有乃至智识上的不平等。这种对弱势群体对普通大众的经年累月的作恶，是最深的恶。”&lt;/p&gt;
&lt;p&gt;作者：霍焗&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文: &lt;a href=&quot;http://www.donews.com/idonews/article/8147.shtm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;再谈百度：KPI、无人机，以及一个必须给父母看的案例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2016年0
    
    </summary>
    
    
      <category term="百度" scheme="http://xiaoyu2er.github.io/tags/%E7%99%BE%E5%BA%A6/"/>
    
      <category term="转载" scheme="http://xiaoyu2er.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>设置 Mac 下文件的默认打开程序 — duti 详解</title>
    <link href="http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/"/>
    <id>http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-03-13T09:16:09.000Z</updated>
    
    <content type="html">&lt;p&gt;在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 &lt;code&gt;.c&lt;/code&gt;, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.&lt;br&gt;再比如我想打开一个 &lt;code&gt;.md&lt;/code&gt; 文件, 这货居然没有默认打开方式, 这个时候我们可能会右击然后找到那个打开方式, 设置成为 sublime 或者 mou.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/duti/get-info.png&quot; alt=&quot;Get Info&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是碰到一个 &lt;code&gt;.markdown&lt;/code&gt;的文件, 系统又蒙圈了, 还是不知道用什么打开, 当然我们也可以按照刚才说的去修改.&lt;/p&gt;
&lt;p&gt;那么有没有一个快捷的方式, 可以批量的修改系统中所有文件的默认打开方式呢? 有! 就是我们今天要介绍的 &lt;code&gt;duti&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Concepts&quot;&gt;&lt;a href=&quot;#Concepts&quot; class=&quot;headerlink&quot; title=&quot;Concepts&quot;&gt;&lt;/a&gt;Concepts&lt;/h2&gt;&lt;p&gt;duti是 Mac 下的一个命令行工具, 主要作用为不同文件类型设置默认的应用. &lt;strong&gt;duti&lt;/strong&gt; 的意思其实就是 &lt;strong&gt;default for UTI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在介绍如何使用之前我们需要明确几个概念:&lt;/p&gt;
&lt;h3 id=&quot;UTI&quot;&gt;&lt;a href=&quot;#UTI&quot; class=&quot;headerlink&quot; title=&quot;UTI&quot;&gt;&lt;/a&gt;UTI&lt;/h3&gt;&lt;p&gt;Mac 下的文件类型被定义为 Uniform Type Identifiers (UTI). 例如, HTML 文件的 UTI 是 &lt;strong&gt;public.html&lt;/strong&gt;; Word 文档的 UTI 是 &lt;strong&gt;com.microsoft.word.doc&lt;/strong&gt;.&lt;br&gt;那么改变文件类型的默认打开方式的第一步就是确认文件类型啦.&lt;/p&gt;
&lt;p&gt;第一个方式是去看苹果列出来的 UTI &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Uniform Type Identifiers Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二个方式是使用 &lt;code&gt;mdls&lt;/code&gt; 命令, 这哥们的作用就是: lists the metadata attributes for the specified file&lt;br&gt;那么如何使用呢, 很简单只要把你想要获得 UTI 的文件作为参数就好了&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mdls test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kMDItemContentType             = &lt;span class=&quot;string&quot;&gt;&quot;public.plain-text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kMDItemContentTypeTree         = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.plain-text&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.text&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.data&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.item&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到其中就有这样的输出(截取). 可以看到一个 &lt;code&gt;.txt&lt;/code&gt; 文件的 UTI 就是 &lt;code&gt;public.plain-text&lt;/code&gt;, 那么下面这一坨是干什么的呢?&lt;br&gt;因为文件类型也有一个具体和宽泛的划分嘛, 越往下约 general.&lt;br&gt;再来看一个&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mdls test.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kMDItemContentType             = &lt;span class=&quot;string&quot;&gt;&quot;public.css&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kMDItemContentTypeTree         = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.css&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.text&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.data&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.item&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;public.content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;public.css&lt;/code&gt; 就是 &lt;code&gt;.css&lt;/code&gt; 的 UTI.&lt;/p&gt;
&lt;h3 id=&quot;Bundle-ID&quot;&gt;&lt;a href=&quot;#Bundle-ID&quot; class=&quot;headerlink&quot; title=&quot;Bundle ID&quot;&gt;&lt;/a&gt;Bundle ID&lt;/h3&gt;&lt;p&gt;Bundle ID (应用标识符)) 是 iOS 或者 Mac 应用的唯一标识. 也就是我们希望用什么软件打开我们的文件的那个软件的 ID 啦.&lt;/p&gt;
&lt;p&gt;可以用以下命令获得 Bundle ID:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ osascript &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;id of app &quot;Finder&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com.apple.finder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ osascript &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;id of app &quot;Atom&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com.github.atom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ osascript &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;id of app &quot;Sublime Text 2&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com.sublimetext.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Bundle-Id-amp-UTI&quot;&gt;&lt;a href=&quot;#Bundle-Id-amp-UTI&quot; class=&quot;headerlink&quot; title=&quot;Bundle Id &amp;amp; UTI&quot;&gt;&lt;/a&gt;Bundle Id &amp;amp; UTI&lt;/h3&gt;&lt;p&gt;那么知道了文件的类型UTI, 知道了软件的 Bundle ID, 距离设定文件的默认程序其实就差一步了.&lt;br&gt;还有一个概念, 就是这个软件对于这个文件是个什么角色. 其实我们这里大部分情况只需要关心 &lt;code&gt;editor&lt;/code&gt; 这个角色. 就是编辑角色. 其他的没啥用.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all: application handles all roles for the given UTI.&lt;/li&gt;
&lt;li&gt;viewer: application handles reading and displaying documents with the given UTI.&lt;/li&gt;
&lt;li&gt;editor: application can manipulate and save the item. Implies viewer.&lt;/li&gt;
&lt;li&gt;shell: application can execute the item.&lt;/li&gt;
&lt;li&gt;none: application  cannot  open  the item, but provides an icon for the given UTI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;p&gt;好了, 介绍了这么多概念, 终于到了修改文件默认打开方式的时候了!&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;duti [ -hVv ] [ settings_path ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果上述语句没有给&lt;code&gt;settings_path&lt;/code&gt;, duti 将会从标准输入读取配置. 如果&lt;code&gt;setting_path&lt;/code&gt;是个文件夹的话, 那么 duti 将会从文件夹内的所有文件中读取配置.&lt;/p&gt;
&lt;p&gt;那么这个 setting_path 文件的每一行其实需要三个字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用的标识符 Bundle ID (比如: com.apple.Safari)&lt;/li&gt;
&lt;li&gt;文件类型的 UTI (比如: public.html), 扩展名或者 MIME 类型&lt;/li&gt;
&lt;li&gt;应用对于 UTI 的角色是什么 (比如, editor 编辑器)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;options&quot;&gt;&lt;a href=&quot;#options&quot; class=&quot;headerlink&quot; title=&quot;options&quot;&gt;&lt;/a&gt;options&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-s&lt;/strong&gt;: 选项会让 duti 从命令行读参数.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-x ext&lt;/strong&gt;: 选项会让 duti 输出参数中扩展名对应的默认应用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-d uti&lt;/strong&gt;: 打印 UTI 的默认应用.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-l uti&lt;/strong&gt;: 打印 UTI 的所有可用应用.&lt;/li&gt;
&lt;li&gt;-V: 打印版本.&lt;/li&gt;
&lt;li&gt;-v: 详细输出.&lt;/li&gt;
&lt;li&gt;-h: 帮助.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;examples&quot;&gt;&lt;a href=&quot;#examples&quot; class=&quot;headerlink&quot; title=&quot;examples&quot;&gt;&lt;/a&gt;examples&lt;/h3&gt;&lt;p&gt;使用 -s 选项, 从命令行读取参数:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;duti &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; com.apple.Safari public.html all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duti &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; com.apple.Finder ftp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是我比较喜欢把这个设定放到一个文件里, 比如 &lt;code&gt;duti-sublime&lt;/code&gt;,&lt;br&gt;我希望用 Sublime 打开 &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, 以及富文本文件, 纯文本文件, 以及一些 shell 脚本.&lt;br&gt;那么我的文件内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    net&lt;span class=&quot;selector-class&quot;&gt;.daringfireball&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.markdown&lt;/span&gt;  editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.css&lt;/span&gt;	editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.script&lt;/span&gt;	editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.source-code&lt;/span&gt;  editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.rtf&lt;/span&gt;  editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.plain-text&lt;/span&gt;   editor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com&lt;span class=&quot;selector-class&quot;&gt;.sublimetext&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;    public&lt;span class=&quot;selector-class&quot;&gt;.unix-executable&lt;/span&gt;   editor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行命令:&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;duti&lt;/span&gt; duti-sublime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们在使用 -x 选项, 打印 UTI 的默认应用&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ duti -x css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sublime Text 2.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/opt/homebrew-cask/Caskroom/sublime-text/2.0.2/Sublime Text 2.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com.sublimetext.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;双击&lt;code&gt;test.css&lt;/code&gt;就是Sublime打开啦~&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 &lt;code&gt;.c&lt;/code&gt;, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.&lt;br&gt;再比如我想打开一个 &lt;code&gt;.md&lt;/code&gt; 文件, 这
    
    </summary>
    
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
      <category term="Mac" scheme="http://xiaoyu2er.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>SVG (一) 基础知识总结</title>
    <link href="http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/"/>
    <id>http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/</id>
    <published>2016-01-29T16:00:00.000Z</published>
    <updated>2016-03-24T14:26:38.000Z</updated>
    
    <content type="html">&lt;style&gt;

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
&lt;/style&gt;

&lt;p&gt;近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内容.&lt;br&gt;我看的是这本书 &lt;a href=&quot;http://book.douban.com/subject/25941192/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG Essentials, 2nd Edition&lt;/a&gt;,以及它的中译版 &lt;a href=&quot;http://book.douban.com/subject/26640057/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG精髓（第2版）&lt;/a&gt;.&lt;br&gt;这本书深入浅出, 例子很多, 非常不错. 因为 svg 涉及到很多关于颜色的内容, 所以还是建议大家看电子版.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;工作中的任务是实现一个相框功能, 当中涉及到了诸如 use, image, clip-path 的内容, 学习了一段时间后总算解决了, 所以希望记录一下学习内容和解决方案.&lt;br&gt;内容比较多, 所以准备开一个系列, 这是 SVG 系列的第一篇, 基础知识总结. 后续将会有更多关于 SVG 的内容. 敬请期待!&lt;/p&gt;
&lt;h1 id=&quot;SVG-basics&quot;&gt;&lt;a href=&quot;#SVG-basics&quot; class=&quot;headerlink&quot; title=&quot;SVG basics&quot;&gt;&lt;/a&gt;SVG basics&lt;/h1&gt;&lt;h2 id=&quot;Shape-Reference-Summary&quot;&gt;&lt;a href=&quot;#Shape-Reference-Summary&quot; class=&quot;headerlink&quot; title=&quot;Shape Reference Summary&quot;&gt;&lt;/a&gt;Shape Reference Summary&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;形状&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;line x1=&amp;quot;start-x&amp;quot; y1=&amp;quot;start-y&amp;quot; x2=&amp;quot;end-x&amp;quot; y2=&amp;quot;end-y&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;直线&lt;/strong&gt;: 起点(start-x, start-y) 终点(end-x, end-y);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;rect x=&amp;quot;left-x&amp;quot; y=&amp;quot;top-y&amp;quot; width=&amp;quot;width&amp;quot; height=&amp;quot;height&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;矩形&lt;/strong&gt;: 左上角(left-x, top-y), 宽高 width, height&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;circle cx=&amp;quot;center-x&amp;quot; cy=&amp;quot;center-y&amp;quot; r=&amp;quot;radius&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;圆&lt;/strong&gt;: 圆心(center-x, center-y) 半径 r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ellipse cx=&amp;quot;center-x&amp;quot; cy=&amp;quot;center-y&amp;quot; rx=&amp;quot;x-radius&amp;quot; ry=&amp;quot;y-radius&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;椭圆&lt;/strong&gt;: 圆心(center-x, center-y) xy轴半径 rx, ry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;polygon points=&amp;quot;points-list&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;多边形&lt;/strong&gt;: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;polyline points=&amp;quot;points-list&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;折线&lt;/strong&gt;: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Path-Reference-Summary&quot;&gt;&lt;a href=&quot;#Path-Reference-Summary&quot; class=&quot;headerlink&quot; title=&quot;Path Reference Summary&quot;&gt;&lt;/a&gt;Path Reference Summary&lt;/h2&gt;&lt;p&gt;本质上, 上述基本形状都是路径(path)的简写. 简写可以使得 svg 文档更具有可读性. 但是当碰到复杂路径时, 就需要 path 来描述. 以下总结中, 凡是出现大写字母表示后续坐标为绝对坐标, 凡是小写字母都代表相对于上一个坐标的相对位移. Z 同 z 无差别. 因为表示闭合, 其后不用跟坐标&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M(m) x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;移动到(x, y) (小写表示相对于上个坐标的位移, 下同)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;L(l) x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;画一条直线到(x, y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;H(h) x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;水平画一条直线到 x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;V(v) y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;竖直画一条直线到 y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A(a) rx ry x-axis-rotation large-arc sweep x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;画一段到(x,y)的椭圆弧. 椭圆弧的 x, y 轴半径分别为 rx,ry. 椭圆相对于 x 轴旋转 x-axis-rotation 度. large-arc=0表明弧线小于180读, large-arc=1表示弧线大于180度. sweep=0表明弧线逆时针旋转, sweep=1表明弧线顺时间旋转. 具体解释看&lt;a href=&quot;#arc&quot;&gt;如何绘制椭圆弧&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Q(q) cx cy x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从当前点画一条到(x, y)的二次&lt;a href=&quot;http://www.wikiwand.com/zh-hans/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;贝塞尔曲线&lt;/a&gt;, 曲线的控制点为(cx, cy). 关于二次贝塞尔曲线请看&lt;a href=&quot;#quadratic-bezier&quot;&gt;二次贝塞尔曲线详解&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T(t) x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此命令只能跟在一个 Q 命令使用, 假设 Q 命令生成曲线 s,  T 命令的作用是从 s 的终点再画一条到(x y)的二次贝塞尔曲线, 曲线的控制点为 s 控制点关于 s 终点的对称点. T 命令生成的曲线会非常平滑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C(c) cx1 cy1 cx2 cy2 x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从当前点画一条到(x, y)的三次贝塞尔曲线, 曲线的开始控制点和终点控制点为别为 (cx1, cy1), (cx2, cy2). 关于三次贝塞尔曲线请看&lt;a href=&quot;#cubic-bezier&quot;&gt;三次贝塞尔曲线详解&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S(s) cx2 cy2 x y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此命令只能跟在 C 命令后使用, 假设 C 命令生成曲线 s, S 命令的作用是再画一条到 (x, y)的三次贝塞尔曲线, 曲线的终点控制点是 (cx2, cy2), 曲线的开始控制点是 s 的终点控制点关于 s 终点的对称点.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Transformation-Reference-Summary&quot;&gt;&lt;a href=&quot;#Transformation-Reference-Summary&quot; class=&quot;headerlink&quot; title=&quot;Transformation Reference Summary&quot;&gt;&lt;/a&gt;Transformation Reference Summary&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;transform&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;translate(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;平移&lt;/strong&gt;: 将用户坐标系统的坐标原点移动到(x, y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;scale(xFactor, yFactor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;缩放&lt;/strong&gt;: 将用户坐标系统的xy轴单位长度分别乘(xFactor, yFactor)倍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;scale(factor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;缩放&lt;/strong&gt;: 同 &lt;code&gt;scale(factor, factor)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rotate(angle, centerX, centerY)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;旋转&lt;/strong&gt;: 将用户坐标系统以(centerX, centerY)为旋转中心顺时针旋转 angle 度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rotate(angle)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;旋转&lt;/strong&gt;: 同 &lt;code&gt;rotate(angle, 0, 0)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skewX(angle)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倾斜&lt;/strong&gt;: 根据 angle 倾斜所有 x 轴坐标, 视觉上会看到 y 轴倾斜…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skewY(angle)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倾斜&lt;/strong&gt;: 根据 angle 倾斜所有 y 轴坐标, 视觉上会看到 x 轴倾斜…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;matrix(a b c d e f)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;矩阵变换&lt;/strong&gt;: 将坐标系统进行矩阵变换, 详细内容请参考后续文章&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Details&quot;&gt;&lt;a href=&quot;#Details&quot; class=&quot;headerlink&quot; title=&quot;Details&quot;&gt;&lt;/a&gt;Details&lt;/h1&gt;&lt;h2 id=&quot;Ellipse&quot;&gt;&lt;a href=&quot;#Ellipse&quot; class=&quot;headerlink&quot; title=&quot;Ellipse&quot;&gt;&lt;/a&gt;Ellipse&lt;/h2&gt;&lt;p&gt;一种直观的表示椭圆弧线的方式是, 根据椭圆中心 (x, y), x 轴半径 rx, y 轴半径 ry, 开始角度 startAngle, 结束角度 endAngle.&lt;br&gt;但是为什么 SVG 会采用 &lt;code&gt;A(a) rx ry x-axis-rotation large-arc sweep x y&lt;/code&gt; 这样的形式呢,&lt;br&gt;主要是因为在 SVG 中, 弧线并不是孤立的存在, 他要成为整体的一部分. 所以 SVG 采用了起始点这样的方式.&lt;br&gt;那么其他的 x-axis-rotation, large-arc, sweep 又是什么意思呢? 我们现在来看下面这张图.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/svg/arcs02.svg&quot; alt=&quot;ellipse&quot;&gt;&lt;/p&gt;
&lt;p&gt;当确定了两个点已经椭圆的 rx, ry 后并不能唯一确定一条椭圆弧, 实际上根据是否是大圆, 路径是否是逆时针可以产生四条 (b, c, d, e)&lt;br&gt;其中, large-arc-flag=0 表示小圆, sweep-flag=0 表示逆时针.&lt;/p&gt;
&lt;p&gt;那么 x-axis-rotation 又是什么意思呢? b, c, d, e 产生的前提是 椭圆的 x 轴与用户坐标系的 x 轴是平行的.&lt;br&gt;f 图表示椭圆 x 轴相对于用户坐标系的 x 轴旋转30度所产生的椭圆弧. 灰色的部分表示原来产生的椭圆弧.&lt;/p&gt;
&lt;h2 id=&quot;Quadratic-Bezier&quot;&gt;&lt;a href=&quot;#Quadratic-Bezier&quot; class=&quot;headerlink&quot; title=&quot;Quadratic Bezier&quot;&gt;&lt;/a&gt;Quadratic Bezier&lt;/h2&gt;&lt;p&gt;关于贝塞尔曲线的数学含义请看&lt;a href=&quot;http://www.wikiwand.com/en/B%C3%A9zier_curve&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bézier curve&lt;/a&gt;&lt;br&gt;这里直观的讲一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/svg/quad01.svg&quot; alt=&quot;quadratic bezier 01&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上曲线的路径表示是: &lt;code&gt;&amp;lt;path d=&amp;quot;M200,300 Q400,50 600,300 T1000,300&amp;quot;/&amp;gt;&lt;/code&gt;&lt;br&gt;我们可以看出:&lt;br&gt;A 是起点, B 是终点, C 就是控制点.&lt;br&gt;找出 AC 的重点 D, BC 的重点 E, 连接 DE, 找出其中点 F, F 即这条曲线前半段的一个切点.&lt;/p&gt;
&lt;p&gt;这里不谈数学含义, 这样的几何意义更加直观.&lt;/p&gt;
&lt;p&gt;再来看 T 命令, 其实 T 命令是 Q 的一个简写.&lt;br&gt;其控制点 H 就是上个 Q 命令的控制点 C 关于终点 B 的对称点.&lt;br&gt;使用 T 命令产生的曲线往往比较顺滑 :)&lt;/p&gt;
&lt;h2 id=&quot;Cubic-Bezier&quot;&gt;&lt;a href=&quot;#Cubic-Bezier&quot; class=&quot;headerlink&quot; title=&quot;Cubic Bezier&quot;&gt;&lt;/a&gt;Cubic Bezier&lt;/h2&gt;&lt;p&gt;再来看一下三次贝塞尔曲线&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/svg/cubic01.svg&quot; alt=&quot;cubic bezier 01&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;path d=&amp;quot;M100,200 C100,100 250,100 250,200 S400,300 400,200&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前半段曲线(C 命令) s1:&lt;br&gt;起点 A, 终点 B, 起点控制点 C, 终点控制点 D, 连接 AC, BD, CD;&lt;br&gt;找到 CD 中点 F, 连接 AC 中点 E 与 F, 连接 BD 中点 G 与 F;&lt;br&gt;连接 EF, FG, 连接 EF 中点 H 与 FG 中点 I;&lt;br&gt;I 即为前半段曲线的切点;&lt;/p&gt;
&lt;p&gt;后半段曲线(S 命令) s2:&lt;br&gt;S 只能跟在 C 命令后使用;&lt;br&gt;s2 的起点 B, 终点 L, 终点控制点 K;&lt;br&gt;s2 的起点控制点是 s1 的终点控制点 D 关于 s1终点 B 的对称点&lt;/p&gt;
&lt;p&gt;下图是更多关于三次贝塞尔曲线的例子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/svg/cubic02.svg&quot; alt=&quot;cubic bezier 01&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25941192/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG Essentials, 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/26640057/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG精髓（第2版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/SVG/paths.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;以上图片均改编自W3C SVG规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN SVG Tutorial - Path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;style&gt;

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
&lt;/style&gt;

&lt;p&gt;近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内容.&lt;br&gt;我看的是这本书 &lt;a href=&quot;http://book.douban.com/subject/25941192/&quot;&gt;SVG Essentials, 2nd Edition&lt;/a&gt;,以及它的中译版 &lt;a href=&quot;http://book.douban.com/subject/26640057/&quot;&gt;SVG精髓（第2版）&lt;/a&gt;.&lt;br&gt;这本书深入浅出, 例子很多, 非常不错. 因为 svg 涉及到很多关于颜色的内容, 所以还是建议大家看电子版.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SVG" scheme="http://xiaoyu2er.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Angular Scope 的继承关系</title>
    <link href="http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/"/>
    <id>http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/</id>
    <published>2016-01-22T16:00:00.000Z</published>
    <updated>2016-03-13T09:26:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;JavaScript-Prototypal-Inheritance&quot;&gt;&lt;a href=&quot;#JavaScript-Prototypal-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Prototypal Inheritance&quot;&gt;&lt;/a&gt;JavaScript Prototypal Inheritance&lt;/h1&gt;&lt;p&gt;首先我们先来回顾以下 javascript 中出现的原型继承:&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParentScope&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.aString = &lt;span class=&quot;string&quot;&gt;&quot;parent string&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.aNumber = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.anArray = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.anObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;property1&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;parent prop1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;property2&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;parent prop2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.aFunction = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;parent output&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChildScope&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChildScope.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParentScope();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; childScope = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChildScope();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ChildScope 原型继承自 ParentScope&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/B2FE24340A82C7B6FF9BF1CBDA5BA818.png&quot; alt=&quot;normal prototypal inheritance&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们要在 childScope 上查询一个定义在 parentScope 的属性, JavaScript 会先在 childScope 上查找, 如果没有查到, 那么会顺着原型链去查找. 所以以下判别式均为 &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;childScope.aString === &lt;span class=&quot;symbol&quot;&gt;&#39;parent&lt;/span&gt; string&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope.anArray[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] === &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope.anObject.property1 === &lt;span class=&quot;symbol&quot;&gt;&#39;parent&lt;/span&gt; prop1&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope.aFunction&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt; === &lt;span class=&quot;symbol&quot;&gt;&#39;parent&lt;/span&gt; output&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们做如下操作:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;childScope&lt;span class=&quot;selector-class&quot;&gt;.aString&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;child string&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链并没有被访问, 一个新的 &lt;code&gt;aString&lt;/code&gt; 会被加入到 childScope 的属性中去, 新的属性会隐藏 parentScope 中的同名属性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/220573C69F0581E93828B5670F52C415.png&quot; alt=&quot;shadowing&quot;&gt;&lt;/p&gt;
&lt;p&gt;假设我们做出如下操作:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;childScope&lt;span class=&quot;selector-class&quot;&gt;.anArray&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope&lt;span class=&quot;selector-class&quot;&gt;.anObject&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.property1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;child prop1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链被访问了. 因为 &lt;code&gt;anArray&lt;/code&gt;, &lt;code&gt;anObject&lt;/code&gt; 没有在 childScope 中找到.&lt;br&gt;新的赋值操作均在 parentScope 上进行. childScope 上没有添加任何新的属性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/6AB968DED1A16F35C0B07ABE855F1DE1.png&quot; alt=&quot;follow the chain&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们做出如下操作&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;childScope&lt;span class=&quot;selector-class&quot;&gt;.anArray&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;555&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope&lt;span class=&quot;selector-class&quot;&gt;.anObject&lt;/span&gt; = &amp;#123; name: &lt;span class=&quot;string&quot;&gt;&#39;Mark&#39;&lt;/span&gt;, country: &lt;span class=&quot;string&quot;&gt;&#39;USA&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链没有被访问, childScope 会获得两个新的属性, 并且会隐藏 parentScope 上的同名属性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/E2B99E360766E387E06F30DE655F6883.png&quot; alt=&quot;not following the chain&quot;&gt;&lt;/p&gt;
&lt;p&gt;仔细体会上面的三次操作. 第一第三次均是对某个属性进行赋值, 原型链并不会被访问, 由于属性并不存在, 所以新的属性将会被添加. 而第二次其实是先访问, &lt;code&gt;childScope.anArray&lt;/code&gt;, &lt;code&gt;childScope.anObject&lt;/code&gt;, 再对其访问的对象的某个属性进行复制.&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们读取 childScope.propertyX, 而 childScope 拥有 propertyX, 那么原型链不会被访问&lt;/li&gt;
&lt;li&gt;如果我们读取 childScope.propertyX, 而 childScope 并没有 propertyX, 那么原型链会被访问.&lt;/li&gt;
&lt;li&gt;如果对 childScope.propertyX 进行赋值, 那么原型链并不会被访问.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后我们再来看一种情况:&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; childScope.anArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope.anArray[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] === &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们显示删除了 childScope 的一个属性, 接着试图读取这个属性, 由于 childScope 并没有了这个属性, 所以原型链会被访问.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/BD6A16127625E60B805FC02B117C754C.png&quot; alt=&quot;after deleting a property&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Angular-Scope-Inheritance&quot;&gt;&lt;a href=&quot;#Angular-Scope-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Angular Scope Inheritance&quot;&gt;&lt;/a&gt;Angular Scope Inheritance&lt;/h1&gt;&lt;p&gt;接着我们来看看 Angular 中的 scope 继承&lt;/p&gt;
&lt;p&gt;以下指令会创建新的 scope, 并且会在原型上继承 父scope (即$scope.$parent, 下文两个词互为同义词):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ng-repeat&lt;/li&gt;
&lt;li&gt;ng-switch&lt;/li&gt;
&lt;li&gt;ng-view&lt;/li&gt;
&lt;li&gt;ng-controller&lt;/li&gt;
&lt;li&gt;带有 &lt;code&gt;scope: true&lt;/code&gt; 的指令&lt;/li&gt;
&lt;li&gt;带有 &lt;code&gt;transclude: true&lt;/code&gt; 的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下指令创建新的指令, 且在原型上 &lt;strong&gt;不继承&lt;/strong&gt; 父scope:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带有 &lt;code&gt;scope: { ... }&lt;/code&gt; 的指令, 这会创建一个 独立的scope (isolate scope)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 默认指令并不会创建 scope, 默认是 &lt;code&gt;scope: false&lt;/code&gt;, 通常称之为 共享scope.&lt;/p&gt;
&lt;p&gt;让我们来看几个例子:&lt;/p&gt;
&lt;h2 id=&quot;ng-include&quot;&gt;&lt;a href=&quot;#ng-include&quot; class=&quot;headerlink&quot; title=&quot;ng-include&quot;&gt;&lt;/a&gt;ng-include&lt;/h2&gt;&lt;p&gt;JS:&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.myPrimitive = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.myObject    = &amp;#123;aNumber: &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; myPrimitive &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123; myObject.aNumber &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; // cannot use double curly brackets in jekyll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/ng-template&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/tpl1.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;handlebars&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myPrimitive&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-include&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&#39;/tpl1.html&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/ng-template&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/tpl2.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;handlebars&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myObject.aNumber&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-include&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&#39;/tpl2.html&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每一个 ng-include 都会创建一个 子scope, 并在原型上继承 父 scope&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/4FF01866A53AFF5A86061140DB783455.png&quot; alt=&quot;ng-include&quot;&gt;&lt;/p&gt;
&lt;p&gt;向第一个 input 输入数字, 一个新的属性 &lt;code&gt;myPrimitive&lt;/code&gt; 将会被创建, 同时隐藏 父 scope 的 &lt;code&gt;myPrimitive&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/3EDC9636029502E51C1E5C3F3CFF281A.png&quot; alt=&quot;ng-include primitive&quot;&gt;&lt;/p&gt;
&lt;p&gt;向第二个 input 输入数字, 子 scope 并不会创建一个新的属性, 这时候原型继承发挥了作用.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/DF9CE2689AC84645D641B8EE1EA8EDF4.png&quot; alt=&quot;ng-include object&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一种情况很可能不是我们期待的结果, 所以可以显式的调用 &lt;code&gt;$parent&lt;/code&gt; 来解决这个问题.&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt; ng-model=&lt;span class=&quot;string&quot;&gt;&quot;$parent.myPrimitive&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;向第一个 input 键入数字, 这时候就不会产生新的属性了. $parent 指向了 父scope. 但是 $parent 和 原型上的继承并不一定相等. 稍后我们会看到一个例子.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/7083CECC79990759E33B8992C5A886CA.png&quot; alt=&quot;ng-include $parent&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于所有的 scope, 无论是共享的(&lt;code&gt;scope: false&lt;/code&gt;), 继承的(&lt;code&gt;scope: true&lt;/code&gt;), 还是孤立的(&lt;code&gt;scope: { ... }&lt;/code&gt;), Angular 都会建立一个 父-子 的层级关系, 这个层级关系是根据 dom 结构的层级关系决定的, 可以通过 &lt;code&gt;$parent&lt;/code&gt;, &lt;code&gt;$$childHead&lt;/code&gt;, &lt;code&gt;$$childTail&lt;/code&gt; 来访问.&lt;/p&gt;
&lt;p&gt;为了避免刚才的例子出现的子 scope 创建新属性情况的发声, 除了使用 &lt;code&gt;$scope&lt;/code&gt;, 还可以使用调用原型链上的方法.&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the parent scope&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.setMyPrimitive = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $scope.myPrimitive = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ng-switch-ng-view&quot;&gt;&lt;a href=&quot;#ng-switch-ng-view&quot; class=&quot;headerlink&quot; title=&quot;ng-switch ng-view&quot;&gt;&lt;/a&gt;ng-switch ng-view&lt;/h2&gt;&lt;p&gt;ng-switch, ng-view 与 ng-include 情况类似, 不赘述.&lt;/p&gt;
&lt;h2 id=&quot;ng-repeat&quot;&gt;&lt;a href=&quot;#ng-repeat&quot; class=&quot;headerlink&quot; title=&quot;ng-repeat&quot;&gt;&lt;/a&gt;ng-repeat&lt;/h2&gt;&lt;p&gt;ng-repeat 有一点特殊.&lt;/p&gt;
&lt;p&gt;JS:&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.myArrayOfPrimitives = [ &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.myArrayOfObjects    = [&amp;#123;num: &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;&amp;#125;, &amp;#123;num: &lt;span class=&quot;number&quot;&gt;202&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;num in myArrayOfPrimitives&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;num&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;obj in myArrayOfObjects&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;obj.num&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于每一次迭代, ng-repeat 都会创建一个 子scope, 并在原型上继承 父scope, &lt;strong&gt;但是他还会将 父scope 上的属性赋值到 子scope 上&lt;/strong&gt;. 新的属性名就是 &lt;code&gt;ng-repeat=&amp;quot;** in parentScope.property&amp;quot;&lt;/code&gt; 中的 **.&lt;br&gt;源码中的 ng-repeat 是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;childScope = scope.$new(); // child scope prototypically inherits from parent scope ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childScope[valueIdent] = &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;; // creates a new childScope property&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 ** 是 primitive, 那么一份 copy 会被赋值到新的属性上. 修改 子scope 上的新属性自然不会修改 父 scope 上的属性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/5461BD4DFDF60DA34B9E91AE8DA8A6A6.png&quot; alt=&quot;ng-repeat primitive&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果 ** 是个 object, 那么一个 reference 会被赋值到新的 子scope 属性上. 修改这个属性, 就是修改 父scope 对应的属性.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/091471A0D7D49CDDF1632FF25096118B.png&quot; alt=&quot;ng-repeat object&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ng-controller&quot;&gt;&lt;a href=&quot;#ng-controller&quot; class=&quot;headerlink&quot; title=&quot;ng-controller&quot;&gt;&lt;/a&gt;ng-controller&lt;/h2&gt;&lt;p&gt;ng-controller 也是会创建新的 子scope, 同时原型继承 父scope. 如同 ng-include, ng-switch, ng-view.&lt;br&gt;但是, 使用 $scope 来共享数据被认为是一种不好的操作. 因为原型链可是会一直向上追溯的.&lt;br&gt;如果想要共享数据, 最好使用 service.&lt;/p&gt;
&lt;h1 id=&quot;Angular-Directives&quot;&gt;&lt;a href=&quot;#Angular-Directives&quot; class=&quot;headerlink&quot; title=&quot;Angular Directives&quot;&gt;&lt;/a&gt;Angular Directives&lt;/h1&gt;&lt;p&gt;我们来总结以下指令中的 scope:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;scope: false&lt;/code&gt;(默认的), 指令不会创建新的 scope, 没有继承关系. 与 $parent 共享 $scope.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope: true&lt;/code&gt;, 指令会创建一个 子scope, 并在原型上继承 $parent. 如果在一个 DOM 上有多个指令想要创建新的 scope, 会报错.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope: { ... }&lt;/code&gt;, 指令会创建一个 孤立的scope. 这在创建可重用的组件时是最好的选择. 但是, 即使如此, 指令还是希望读取 $parent 的数据. 这个时候可以使用如下符号获得:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scope: { **: &amp;quot;=&amp;quot;}&lt;/code&gt; 与 $parent 建立双向绑定.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope: { **: &amp;quot;@&amp;quot;}&lt;/code&gt; 与 $parent 建立单向绑定.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope: { **: &amp;quot;&amp;amp;&amp;quot;}&lt;/code&gt; 绑定 $parent 的表达式.&lt;br&gt;想要获得相应的属性, 必须通过指令上的属性获得&lt;/li&gt;
&lt;li&gt;HTML: &lt;code&gt;&amp;lt;div my-directive the-Parent-Prop=parentProp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JS: &lt;code&gt;scope: { localProp: &amp;#39;@theParentProp&amp;#39; }&lt;/code&gt;&lt;br&gt;假设:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML: &lt;code&gt;&amp;lt;my-directive interpolated=&amp;quot;&amp;quot; twowayBinding=&amp;quot;parentProp2&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JS: &lt;code&gt;scope: { interpolatedProp: &amp;#39;@interpolated&amp;#39;, twowayBindingProp: &amp;#39;=twowayBinding&amp;#39; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指令在 link 期间: &lt;code&gt;scope.someIsolateProp = &amp;quot;I&amp;#39;m isolated&amp;quot;&lt;/code&gt;&lt;br&gt;其中的关系如图:&lt;br&gt;&lt;img src=&quot;/img/angular-scope/931892730C42AB06340A91FDFE61E2BA.png&quot; alt=&quot;isolate scope&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;transclude: true&lt;/code&gt;, 指令创建了一个 “transcluded” 的子scope, 在原型上继承其 父scope. 如果上述例子同时具有&lt;code&gt;transclude: true&lt;/code&gt;. 那么这个 “transcluded” scope, 和 “islolated” scope 是姊妹关系. 他们的 $parent 指向同一个 scope. 且 isolate scope 的 $$nextSibling 就是这个 “transcluded scope”. 下图反应了他们之间的关系:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/img/angular-scope/C6ADE4397FA38424C889CDB6C068B319.png&quot; alt=&quot;transcluded scope&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular Wiki: Understanding Scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-Prototypal-Inheritance&quot;&gt;&lt;a href=&quot;#JavaScript-Prototypal-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Prototypal Inhe
    
    </summary>
    
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>工欲善其事 必先利其器</title>
    <link href="http://xiaoyu2er.github.io/2016/01/14/cool-software-collection/"/>
    <id>http://xiaoyu2er.github.io/2016/01/14/cool-software-collection/</id>
    <published>2016-01-13T16:00:00.000Z</published>
    <updated>2016-03-24T14:16:51.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Mac-软件&quot;&gt;&lt;a href=&quot;#Mac-软件&quot; class=&quot;headerlink&quot; title=&quot;Mac 软件&quot;&gt;&lt;/a&gt;Mac 软件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://archiverapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Archiever: Mac下最好的解压缩工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stclairsoft.com/DefaultFolderX/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Default Folder X: 玩转打开/保存窗口，提高文件操作效率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash: Mac下最好的 API 离线查询工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flashlight.nateparrott.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flashlight: Alfred 的替代品, 一键控制你的 Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://justgetflux.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;F.lux: 护眼工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2: Mac 下最好的 terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh-my-zsh: Oh My Zsh is a way of life! &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://manytricks.com/moom/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Moom: Mac 下最好的窗口控制器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://noiz.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Noizio: 风声雨声键盘声&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pasteapp.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paste: Mac 下最好的剪贴板管理工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://happenapps.com/#quiver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quiver: The Programmer’s Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://panic.com/transmit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transmit: Mac 下最好的文件传输助手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Code: 轻量级文本编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tuxera.com/products/tuxera-ntfs-for-mac/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tuxera NTFS: Mac 下最好的 NTFS 格式读取工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://my.vmware.com/web/vmware/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VMware Fusion: Mac 下最好的虚拟机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm: The smartest JavaScript IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wunderlist.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wunderlist: TODO list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xmind.net/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMind: 思维导图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.trankynam.com/xtrafinder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExtraFinder: Better Mac Finder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;VPN&quot;&gt;&lt;a href=&quot;#VPN&quot; class=&quot;headerlink&quot; title=&quot;VPN&quot;&gt;&lt;/a&gt;VPN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gjsq.me/r5162756&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的 GreenVPN 邀请码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fivesheep/chnroutes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用vpn作为默认网络网关的时候, 不使用vpn进行对中国国内ip的访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/using-ssh-over-the-https-port/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决使用 vpn 无法在 terminal 进行 git pull/push 等操作的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Chrome-浏览器插件&quot;&gt;&lt;a href=&quot;#Chrome-浏览器插件&quot; class=&quot;headerlink&quot; title=&quot;Chrome 浏览器插件&quot;&gt;&lt;/a&gt;Chrome 浏览器插件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adblock Plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang-stable/niopocochgahfkiccpjmmpchncjoapek?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS Batarang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dream Afar New Tab: An unexpected trip everyday by simply opening a new tab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Evernote Web Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/buunguyen/octotree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree: Code tree for GitHub and GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86/kfjmkgngkgpgjdoealkmmajmmhpnffoj?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;One key Manger: Onekey enable/disable all apps/themes/extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop/related&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Postman: 接口调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Developer Tools: Adds React debugging tools to the Chrome Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/search-auto-focus/bnmapnomofehlbofbnfboncfpmgfnfpg?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Search Auto-Focus: Auto-focuses search field on websites when you start to type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tampermonkey: The most popular userscript manager for Blink-based browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WEB前端助手(FeHelper)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wikiwand-wikipedia-modern/emffkefkbkpkgpdeeooapgaicgmcbolj?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikiwand: 最美 Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网站&quot;&gt;&lt;a href=&quot;#网站&quot; class=&quot;headerlink&quot; title=&quot;网站&quot;&gt;&lt;/a&gt;网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://devdocs.io/offline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevDocs API 查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guge.suanfazu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谷歌镜像, 自动切换至可用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sxyx2008/DevArticles/issues/99&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google 镜像站搜集, 定期更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://smallpdf.com/cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;轻松玩转PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kat.cr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;各种视频资料, 国外的技术培训&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;福利&quot;&gt;&lt;a href=&quot;#福利&quot; class=&quot;headerlink&quot; title=&quot;福利&quot;&gt;&lt;/a&gt;福利&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dytt.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;电影淘淘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.52mac.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我爱 Mac, 软件下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xclient.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精品 Mac 应用分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19550256&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OS X 平台上有哪些值得推荐的常用软件？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20036899&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员用 Mac 都有哪些必备的 app？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/35050387&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac（OS X）有哪些冷门但是一但发现就无法自拔的软件？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      提升工作效率的超酷工具集合, 持续更新 (Mac, Chrome, Websites)
    
    </summary>
    
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
      <category term="Mac" scheme="http://xiaoyu2er.github.io/tags/Mac/"/>
    
      <category term="Chrome" scheme="http://xiaoyu2er.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Angular $q 完全指南</title>
    <link href="http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/"/>
    <id>http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/</id>
    <published>2016-01-07T16:00:00.000Z</published>
    <updated>2016-03-24T14:16:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Angular-q-完全指南&quot;&gt;&lt;a href=&quot;#Angular-q-完全指南&quot; class=&quot;headerlink&quot; title=&quot;Angular $q 完全指南&quot;&gt;&lt;/a&gt;Angular $q 完全指南&lt;/h1&gt;&lt;p&gt;如果想使用 $http 或者其他异步操作, 那 $q 是必须要掌握的概念啦. Let’s get started!&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;如何理解-q-deferred-object&quot;&gt;&lt;a href=&quot;#如何理解-q-deferred-object&quot; class=&quot;headerlink&quot; title=&quot;如何理解$q, deferred object ?&quot;&gt;&lt;/a&gt;如何理解$q, deferred object ?&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/asnowwolf/p/3689300.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;形象的讲解angular中的$q与promise&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设有一个家具厂，而它有一个VIP客户张先生。&lt;/p&gt;
&lt;p&gt;有一天张先生需要一个豪华衣柜，于是，他打电话给家具厂说我需要一个衣柜，回头做好了给我送来，这个操作就叫$q.defer，也就是延期，因为这个衣柜不是现在要的，所以张先生这是在发起一个可延期的请求。&lt;/p&gt;
&lt;p&gt;同时，家具厂给他留下了一个回执号，并对他说：我们做好了会给您送过去，放心吧。这叫做promise，也就是承诺。&lt;/p&gt;
&lt;p&gt;这样，这个defer算是正式创建了，于是他把这件事记录在自己的日记上，并且同时记录了回执号，这叫做deferred，也就是已延期事件。&lt;/p&gt;
&lt;p&gt;现在，张先生就不用再去想着这件事了，该做什么做什么，这就是“异步”的含义。&lt;/p&gt;
&lt;p&gt;假设家具厂在一周后做完了这个衣柜，并如约送到了张先生家（包邮哦，亲），这就叫做deferred.resolve(衣柜)，也就是“已解决”。而这时候张先生只要签收一下这个（衣柜）参数就行了，当然，这个“邮包”中也不一定只有衣柜，还可以包含别的东西，比如厂家宣传资料、产品名录等。整个过程中轻松愉快，谁也没等谁，没有浪费任何时间。&lt;/p&gt;
&lt;p&gt;假设家具厂在评估后发现这个规格的衣柜我们做不了，那么它就需要deferred.reject(理由)，也就是“拒绝”。拒绝没有时间限制，可以发生在给出承诺之后的任何时候，甚至可能发生在快做完的时候。而且拒绝时候的参数也不仅仅限于理由，还可以包含一个道歉信，违约金之类的，总之，你想给他什么就给他什么，如果你觉得不会惹恼客户，那么不给也没关系。&lt;/p&gt;
&lt;p&gt;假设家具厂发现，自己正好有一个符合张先生要求的存货，它就可以用$q.when(现有衣柜)来把这个承诺给张先生，这件事就立即被解决了，皆大欢喜，张先生可不在乎你是从头做的还是现有的成品，只会惊叹于你们的效率之高。&lt;/p&gt;
&lt;p&gt;假设这个家具厂对客户格外的细心，它还可能通过deferred.notify(进展情况)给张先生发送进展情况的“通知”。&lt;/p&gt;
&lt;p&gt;这样，整个异步流程就圆满完成，无论成功或者失败，张先生都没有往里面投入任何额外的时间成本。&lt;/p&gt;
&lt;p&gt;好，我们再扩展一下这个故事：&lt;/p&gt;
&lt;p&gt;张先生这次需要做一个桌子，三把椅子，一张席梦思，但是他不希望今天收到个桌子，明天收到个椅子，后天又得签收一次席梦思，而是希望家具厂做好了之后一次性送过来，但是他下单的时候又是分别下单的，那么他就可以重新跟家具厂要一个包含上述三个承诺的新承诺，这就是$q.all(桌子承诺，椅子承诺，席梦思承诺)，&lt;/p&gt;
&lt;p&gt;这样，他就不用再关注以前的三个承诺了，直接等待这个新的承诺完成，到时候只要一次性签收了前面的这些承诺就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;如何创建-promise-1&quot;&gt;&lt;a href=&quot;#如何创建-promise-1&quot; class=&quot;headerlink&quot; title=&quot;如何创建 promise -1&quot;&gt;&lt;/a&gt;如何创建 promise -1&lt;/h2&gt;&lt;p&gt;$q 支持两种写法, 第一种是类似于ES6标准构造函数写法 &lt;code&gt;$q(function resolver (resolve, reject) {})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ ES6 写法并不支持 progress/notify 的回调函数
+ 在构造函数中抛异常也并不会显式的reject the promise
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// var iWantResolve = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var iWantResolve = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; es6promise() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return $q(function (resolve, reject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $timeout(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (iWantResolve) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resolve(&lt;span class=&quot;string&quot;&gt;&quot;es6promise resolved&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                reject(&lt;span class=&quot;string&quot;&gt;&quot;es6promise reject&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;promise-的方法&quot;&gt;&lt;a href=&quot;#promise-的方法&quot; class=&quot;headerlink&quot; title=&quot;promise 的方法&quot;&gt;&lt;/a&gt;promise 的方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;promise.then(successCb, errCb, notifyCb)&lt;/li&gt;
&lt;li&gt;其中successCb 将在 promise resolve 后被调用, errCb 将在 promise reject 后被调&lt;/li&gt;
&lt;li&gt;notifyCb 将在 deferred.notify 后被调用, 可以多次调用&lt;/li&gt;
&lt;li&gt;promise.catch == promise.then(null, errCb), 用于处理之前没有被处理的 rejected promise&lt;/li&gt;
&lt;li&gt;promise.finally 将最后被调用, 一般用于资源释放的清理操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight monkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;es6promise()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;/span&gt;data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;/span&gt;err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) output: es6promise resolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) output: es6promise reject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;如何创建-promise-2&quot;&gt;&lt;a href=&quot;#如何创建-promise-2&quot; class=&quot;headerlink&quot; title=&quot;如何创建 promise -2&quot;&gt;&lt;/a&gt;如何创建 promise -2&lt;/h2&gt;&lt;p&gt;第二种是类似于 commonJS 的写法 $q.deferred()&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; commonJsPromise() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var deferred = $q.defer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $timeout(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        deferred.notify(&lt;span class=&quot;string&quot;&gt;&quot;commonJS notify&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (iWantResolve) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            deferred.resolve(&lt;span class=&quot;string&quot;&gt;&quot;commonJS resolved&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            deferred.reject(&lt;span class=&quot;string&quot;&gt;&quot;commonJS reject&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return deferred.promise;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commonJsPromise()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; /** success callback**/(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; /** error callback **/ (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; /** progress callback **/ (&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(update);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) output: commonJS notify commonJS resolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) output: commonJS notify commonJS reject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;q-all&quot;&gt;&lt;a href=&quot;#q-all&quot; class=&quot;headerlink&quot; title=&quot;$q.all&quot;&gt;&lt;/a&gt;$q.all&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$q.all([promise1, promise1])&lt;/code&gt; 接受一个包含若干个 promise 的数组,&lt;/li&gt;
&lt;li&gt;等所有的 promise resolve 后, 其本身 resolve 包含上述结果的数组 [data1, data2]&lt;/li&gt;
&lt;li&gt;如果上述 promise 有一个 reject, 那么$q.all() 会把这个 rejected promise 作为其 rejected promise (只有一个哦)&lt;/li&gt;
&lt;li&gt;progress/notify 的 callback 并没有用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$q.all([es6promise(), commonJsPromise()])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (dataArr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;string&quot;&gt;&quot;$q.all: &quot;&lt;/span&gt;, dataArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;string&quot;&gt;&quot;$q.all: &quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; /** unnecessary **/ (&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;string&quot;&gt;&quot;$q.all&quot;&lt;/span&gt;, update);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) output: $q.all:  [&lt;span class=&quot;string&quot;&gt;&quot;es6promise resolved&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;commonJS resolved&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) output: $q.all:  es6promise reject&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;q-reject-q-when-q-resolve&quot;&gt;&lt;a href=&quot;#q-reject-q-when-q-resolve&quot; class=&quot;headerlink&quot; title=&quot;$q.reject, $q.when, $q.resolve&quot;&gt;&lt;/a&gt;$q.reject, $q.when, $q.resolve&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$q.reject() 立即返回一个rejected 的 promise, 在链式调用的时候很有用&lt;/li&gt;
&lt;li&gt;$q.resolve == $q.when(value, successCb, errorCb, progressCb)&lt;/li&gt;
&lt;li&gt;value 可能是一个 then-able 的 obj(即可以是 $q.defer() 返回的, 也可以是其他库产生的), 也可能是任意数据,  但是 $q.when 最终都会返回一个 promise&lt;/li&gt;
&lt;li&gt;$q.when 既可以写成上述的构造函数形式, 也可以写成 $q.when(value).then(fn, fn, fn) 的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$q.reject(&lt;span class=&quot;string&quot;&gt;&quot;instant reject&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// output: instant reject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt;(commonJsPromise(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; /** success callback **/(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;string&quot;&gt;&quot;$q.when success callback function: &quot;&lt;/span&gt; + data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;string&quot;&gt;&quot;$q.when success callback return another value&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&lt;span class=&quot;string&quot;&gt;&quot;$q.when then function:&quot;&lt;/span&gt; + data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// $q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; success callback functionL: commonJS resolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// $q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; function:$q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; success callback &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; another &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(iWantResolve = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// $q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; err callback function: commonJS reject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// $q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; function:undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;some value&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// output: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;promise-chains-链式调用&quot;&gt;&lt;a href=&quot;#promise-chains-链式调用&quot; class=&quot;headerlink&quot; title=&quot;promise chains 链式调用&quot;&gt;&lt;/a&gt;promise chains 链式调用&lt;/h2&gt;&lt;p&gt;任何在 successCb, errCb 中返回的非 $q.reject()对象, 都将成为一个 resolve 的 promise.&lt;br&gt;所以可以出现如下语法&lt;br&gt;&lt;code&gt;promise.then().then().then()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$q.&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return $q.reject(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// output: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS Documentation for $q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/asnowwolf/p/3689300.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;形象的讲解angular中的$q与promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.syntaxsuccess.com/viewarticle/angular-promise-chaining-explained&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular Promise Chaining Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/blog/2735-q-when-is-the-missing-q-resolve-method-in-angularjs.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$q.when() Is The Missing $q.resolve() Method In AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16770821/how-does-angular-q-when-work&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How does Angular $q.when work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/issues/4493&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$q.when(promise) calls resolve() instead of reject()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular-q-完全指南&quot;&gt;&lt;a href=&quot;#Angular-q-完全指南&quot; class=&quot;headerlink&quot; title=&quot;Angular $q 完全指南&quot;&gt;&lt;/a&gt;Angular $q 完全指南&lt;/h1&gt;&lt;p&gt;如果想使用 $http 或者其他异步操作, 那 $q 是必须要掌握的概念啦. Let’s get started!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
</feed>
