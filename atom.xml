<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[xiaoyu2er's blog]]></title>
  <subtitle><![CDATA[2016, 成长]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xiaoyu2er.github.io/"/>
  <updated>2016-02-06T04:09:07.000Z</updated>
  <id>http://xiaoyu2er.github.io/</id>
  
  <author>
    <name><![CDATA[xiaoyu2er]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[设置 Mac 下文件的默认打开程序 — duti 详解]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/"/>
    <id>http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-02-06T04:09:07.000Z</updated>
    <content type="html"><![CDATA[<p>在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 <code>.c</code>, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.<br>再比如我想打开一个 <code>.md</code> 文件, 这货居然没有默认打开方式, 这个时候我们可能会右击然后找到那个打开方式, 设置成为 sublime 或者 mou.</p>
<p><img src="/img/duti/get-info.png" alt="Get Info"></p>
<p>但是碰到一个 <code>.markdown</code>的文件, 系统又蒙圈了, 还是不知道用什么打开, 当然我们也可以按照刚才说的去修改.</p>
<p>那么有没有一个快捷的方式, 可以批量的修改系统中所有文件的默认打开方式呢? 有! 就是我们今天要介绍的 <code>duti</code></p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>duti是 Mac 下的一个命令行工具, 主要作用为不同文件类型设置默认的应用. <strong>duti</strong> 的意思其实就是 <strong>default for UTI</strong></p>
<p>在介绍如何使用之前我们需要明确几个概念:</p>
<h3 id="UTI"><a href="#UTI" class="headerlink" title="UTI"></a>UTI</h3><p>Mac 下的文件类型被定义为 Uniform Type Identifiers (UTI). 例如, HTML 文件的 UTI 是 <strong>public.html</strong>; Word 文档的 UTI 是 <strong>com.microsoft.word.doc</strong>.<br>那么改变文件类型的默认打开方式的第一步就是确认文件类型啦.</p>
<p>第一个方式是去看苹果列出来的 UTI <a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html" target="_blank" rel="external">Uniform Type Identifiers Reference</a></p>
<p>第二个方式是使用 <code>mdls</code> 命令, 这哥们的作用就是: lists the metadata attributes for the specified file<br>那么如何使用呢, 很简单只要把你想要获得 UTI 的文件作为参数就好了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mdls test.txt</span><br><span class="line"></span><br><span class="line">kMDItemContentType             = <span class="string">"public.plain-text"</span></span><br><span class="line">kMDItemContentTypeTree         = (</span><br><span class="line">    <span class="string">"public.plain-text"</span>,</span><br><span class="line">    <span class="string">"public.text"</span>,</span><br><span class="line">    <span class="string">"public.data"</span>,</span><br><span class="line">    <span class="string">"public.item"</span>,</span><br><span class="line">    <span class="string">"public.content"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>我们可以看到其中就有这样的输出(截取). 可以看到一个 <code>.txt</code> 文件的 UTI 就是 <code>public.plain-text</code>, 那么下面这一坨是干什么的呢?<br>因为文件类型也有一个具体和宽泛的划分嘛, 越往下约 general.<br>再来看一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mdls test.css</span><br><span class="line"></span><br><span class="line">kMDItemContentType             = <span class="string">"public.css"</span></span><br><span class="line">kMDItemContentTypeTree         = (</span><br><span class="line">    <span class="string">"public.css"</span>,</span><br><span class="line">    <span class="string">"public.text"</span>,</span><br><span class="line">    <span class="string">"public.data"</span>,</span><br><span class="line">    <span class="string">"public.item"</span>,</span><br><span class="line">    <span class="string">"public.content"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><code>public.css</code> 就是 <code>.css</code> 的 UTI.</p>
<h3 id="Bundle_ID"><a href="#Bundle_ID" class="headerlink" title="Bundle ID"></a>Bundle ID</h3><p>Bundle ID (应用标识符)) 是 iOS 或者 Mac 应用的唯一标识. 也就是我们希望用什么软件打开我们的文件的那个软件的 ID 啦.</p>
<p>可以用以下命令获得 Bundle ID:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ osascript <span class="operator">-e</span> <span class="string">'id of app "Finder"'</span></span><br><span class="line">com.apple.finder</span><br><span class="line"></span><br><span class="line">$ osascript <span class="operator">-e</span> <span class="string">'id of app "Atom"'</span></span><br><span class="line">com.github.atom</span><br><span class="line"></span><br><span class="line">$ osascript <span class="operator">-e</span> <span class="string">'id of app "Sublime Text 2"'</span></span><br><span class="line">com.sublimetext.<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="Bundle_Id__26amp_3B_UTI"><a href="#Bundle_Id__26amp_3B_UTI" class="headerlink" title="Bundle Id &amp; UTI"></a>Bundle Id &amp; UTI</h3><p>那么知道了文件的类型UTI, 知道了软件的 Bundle ID, 距离设定文件的默认程序其实就差一步了.<br>还有一个概念, 就是这个软件对于这个文件是个什么角色. 其实我们这里大部分情况只需要关心 <code>editor</code> 这个角色. 就是编辑角色. 其他的没啥用.</p>
<ul>
<li>all: application handles all roles for the given UTI.</li>
<li>viewer: application handles reading and displaying documents with the given UTI.</li>
<li>editor: application can manipulate and save the item. Implies viewer.</li>
<li>shell: application can execute the item.</li>
<li>none: application  cannot  open  the item, but provides an icon for the given UTI.</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>好了, 介绍了这么多概念, 终于到了修改文件默认打开方式的时候了!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duti [ -hVv ] [ settings_path ]</span><br></pre></td></tr></table></figure>
<p>如果上述语句没有给<code>settings_path</code>, duti 将会从标准输入读取配置. 如果<code>setting_path</code>是个文件夹的话, 那么 duti 将会从文件夹内的所有文件中读取配置.</p>
<p>那么这个 setting_path 文件的每一行其实需要三个字段:</p>
<ul>
<li>应用的标识符 Bundle ID (比如: com.apple.Safari)</li>
<li>文件类型的 UTI (比如: public.html), 扩展名或者 MIME 类型</li>
<li>应用对于 UTI 的角色是什么 (比如, editor 编辑器)</li>
</ul>
<h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><ul>
<li><strong>-s</strong>: 选项会让 duti 从命令行读参数.</li>
<li><strong>-x ext</strong>: 选项会让 duti 输出参数中扩展名对应的默认应用</li>
<li><strong>-d uti</strong>: 打印 UTI 的默认应用.</li>
<li><strong>-l uti</strong>: 打印 UTI 的所有可用应用.</li>
<li>-V: 打印版本.</li>
<li>-v: 详细输出.</li>
<li>-h: 帮助.</li>
</ul>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><p>使用 -s 选项, 从命令行读取参数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">duti <span class="operator">-s</span> com.apple.Safari public.html all</span><br><span class="line">duti <span class="operator">-s</span> com.apple.Finder ftp</span><br></pre></td></tr></table></figure>
<p>但是我比较喜欢把这个设定放到一个文件里, 比如 <code>duti-sublime</code>,<br>我希望用 Sublime 打开 <code>.md</code>, <code>.css</code>, <code>.js</code>, 以及富文本文件, 纯文本文件, 以及一些 shell 脚本.<br>那么我的文件内容如下:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    net<span class="class">.daringfireball</span><span class="class">.markdown</span>  editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.css</span>	editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.script</span>	editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.source-code</span>  editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.rtf</span>  editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.plain-text</span>   editor</span><br><span class="line">com<span class="class">.sublimetext</span>.<span class="number">2</span>    public<span class="class">.unix-executable</span>   editor</span><br></pre></td></tr></table></figure>
<p>运行命令:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">duti</span> duti-sublime</span><br></pre></td></tr></table></figure>
<p>然后我们在使用 -x 选项, 打印 UTI 的默认应用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ duti -x css</span><br><span class="line">Sublime Text <span class="number">2</span>.app</span><br><span class="line">/opt/homebrew-cask/Caskroom/sublime-text/<span class="number">2.0</span>.<span class="number">2</span>/Sublime Text <span class="number">2</span>.app</span><br><span class="line">com.sublimetext.<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>双击<code>test.css</code>就是Sublime打开啦~</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html</a></li>
<li><a href="http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x" target="_blank" rel="external">http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 <code>.c</code>, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.<br>再比如我想打开一个 <code>.md</code> 文件, 这]]>
    </summary>
    
      <category term="Mac" scheme="http://xiaoyu2er.github.io/tags/Mac/"/>
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SVG (一) 基础知识总结]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/"/>
    <id>http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/</id>
    <published>2016-01-29T16:00:00.000Z</published>
    <updated>2016-02-06T04:10:51.000Z</updated>
    <content type="html"><![CDATA[<style>

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
</style>

<p>近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内容.<br>我看的是这本书 <a href="http://book.douban.com/subject/25941192/" target="_blank" rel="external">SVG Essentials, 2nd Edition</a>,以及它的中译版 <a href="http://book.douban.com/subject/26640057/" target="_blank" rel="external">SVG精髓（第2版）</a>.<br>这本书深入浅出, 例子很多, 非常不错. 因为 svg 涉及到很多关于颜色的内容, 所以还是建议大家看电子版.</p>
<p>工作中的任务是实现一个相框功能, 当中涉及到了诸如 use, image, clip-path 的内容, 学习了一段时间后总算解决了, 所以希望记录一下学习内容和解决方案.<br>内容比较多, 所以准备开一个系列, 这是 SVG 系列的第一篇, 基础知识总结. 后续将会有更多关于 SVG 的内容. 敬请期待!</p>
<h1 id="SVG_basics"><a href="#SVG_basics" class="headerlink" title="SVG basics"></a>SVG basics</h1><h2 id="Shape_Reference_Summary"><a href="#Shape_Reference_Summary" class="headerlink" title="Shape Reference Summary"></a>Shape Reference Summary</h2><table>
<thead>
<tr>
<th>形状</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;line x1=&quot;start-x&quot; y1=&quot;start-y&quot; x2=&quot;end-x&quot; y2=&quot;end-y&quot;/&gt;</code></td>
<td><strong>直线</strong>: 起点(start-x, start-y) 终点(end-x, end-y);</td>
</tr>
<tr>
<td><code>&lt;rect x=&quot;left-x&quot; y=&quot;top-y&quot; width=&quot;width&quot; height=&quot;height&quot; /&gt;</code></td>
<td><strong>矩形</strong>: 左上角(left-x, top-y), 宽高 width, height</td>
</tr>
<tr>
<td><code>&lt;circle cx=&quot;center-x&quot; cy=&quot;center-y&quot; r=&quot;radius&quot;/&gt;</code></td>
<td><strong>圆</strong>: 圆心(center-x, center-y) 半径 r</td>
</tr>
<tr>
<td><code>&lt;ellipse cx=&quot;center-x&quot; cy=&quot;center-y&quot; rx=&quot;x-radius&quot; ry=&quot;y-radius&quot;/&gt;</code></td>
<td><strong>椭圆</strong>: 圆心(center-x, center-y) xy轴半径 rx, ry</td>
</tr>
<tr>
<td><code>&lt;polygon points=&quot;points-list&quot;/&gt;</code></td>
<td><strong>多边形</strong>: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….</td>
</tr>
<tr>
<td><code>&lt;polyline points=&quot;points-list&quot;/&gt;</code></td>
<td><strong>折线</strong>: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….</td>
</tr>
</tbody>
</table>
<h2 id="Path_Reference_Summary"><a href="#Path_Reference_Summary" class="headerlink" title="Path Reference Summary"></a>Path Reference Summary</h2><p>本质上, 上述基本形状都是路径(path)的简写. 简写可以使得 svg 文档更具有可读性. 但是当碰到复杂路径时, 就需要 path 来描述. 以下总结中, 凡是出现大写字母表示后续坐标为绝对坐标, 凡是小写字母都代表相对于上一个坐标的相对位移. Z 同 z 无差别. 因为表示闭合, 其后不用跟坐标</p>
<table>
<thead>
<tr>
<th>command</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>M(m) x y</code></td>
<td>移动到(x, y) (小写表示相对于上个坐标的位移, 下同)</td>
</tr>
<tr>
<td><code>L(l) x y</code></td>
<td>画一条直线到(x, y)</td>
</tr>
<tr>
<td><code>H(h) x</code></td>
<td>水平画一条直线到 x</td>
</tr>
<tr>
<td><code>V(v) y</code></td>
<td>竖直画一条直线到 y</td>
</tr>
<tr>
<td><code>A(a) rx ry x-axis-rotation large-arc sweep x y</code></td>
<td>画一段到(x,y)的椭圆弧. 椭圆弧的 x, y 轴半径分别为 rx,ry. 椭圆相对于 x 轴旋转 x-axis-rotation 度. large-arc=0表明弧线小于180读, large-arc=1表示弧线大于180度. sweep=0表明弧线逆时针旋转, sweep=1表明弧线顺时间旋转. 具体解释看<a href="/#arc">如何绘制椭圆弧</a></td>
</tr>
<tr>
<td><code>Q(q) cx cy x y</code></td>
<td>从当前点画一条到(x, y)的二次<a href="http://www.wikiwand.com/zh-hans/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="external">贝塞尔曲线</a>, 曲线的控制点为(cx, cy). 关于二次贝塞尔曲线请看<a href="/#quadratic-bezier">二次贝塞尔曲线详解</a></td>
</tr>
<tr>
<td><code>T(t) x y</code></td>
<td>此命令只能跟在一个 Q 命令使用, 假设 Q 命令生成曲线 s,  T 命令的作用是从 s 的终点再画一条到(x y)的二次贝塞尔曲线, 曲线的控制点为 s 控制点关于 s 终点的对称点. T 命令生成的曲线会非常平滑</td>
</tr>
<tr>
<td><code>C(c) cx1 cy1 cx2 cy2 x y</code></td>
<td>从当前点画一条到(x, y)的三次贝塞尔曲线, 曲线的开始控制点和终点控制点为别为 (cx1, cy1), (cx2, cy2). 关于三次贝塞尔曲线请看<a href="/#cubic-bezier">三次贝塞尔曲线详解</a></td>
</tr>
<tr>
<td><code>S(s) cx2 cy2 x y</code></td>
<td>此命令只能跟在 C 命令后使用, 假设 C 命令生成曲线 s, S 命令的作用是再画一条到 (x, y)的三次贝塞尔曲线, 曲线的终点控制点是 (cx2, cy2), 曲线的开始控制点是 s 的终点控制点关于 s 终点的对称点.</td>
</tr>
</tbody>
</table>
<h2 id="Transformation_Reference_Summary"><a href="#Transformation_Reference_Summary" class="headerlink" title="Transformation Reference Summary"></a>Transformation Reference Summary</h2><table>
<thead>
<tr>
<th>transform</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>translate(x, y)</code></td>
<td><strong>平移</strong>: 将用户坐标系统的坐标原点移动到(x, y)</td>
</tr>
<tr>
<td><code>scale(xFactor, yFactor)</code></td>
<td><strong>缩放</strong>: 将用户坐标系统的xy轴单位长度分别乘(xFactor, yFactor)倍</td>
</tr>
<tr>
<td><code>scale(factor)</code></td>
<td><strong>缩放</strong>: 同 <code>scale(factor, factor)</code></td>
</tr>
<tr>
<td><code>rotate(angle, centerX, centerY)</code></td>
<td><strong>旋转</strong>: 将用户坐标系统以(centerX, centerY)为旋转中心顺时针旋转 angle 度</td>
</tr>
<tr>
<td><code>rotate(angle)</code></td>
<td><strong>旋转</strong>: 同 <code>rotate(angle, 0, 0)</code></td>
</tr>
<tr>
<td><code>skewX(angle)</code></td>
<td><strong>倾斜</strong>: 根据 angle 倾斜所有 x 轴坐标, 视觉上会看到 y 轴倾斜…</td>
</tr>
<tr>
<td><code>skewY(angle)</code></td>
<td><strong>倾斜</strong>: 根据 angle 倾斜所有 y 轴坐标, 视觉上会看到 x 轴倾斜…</td>
</tr>
<tr>
<td><code>matrix(a b c d e f)</code></td>
<td><strong>矩阵变换</strong>: 将坐标系统进行矩阵变换, 详细内容请参考后续文章</td>
</tr>
</tbody>
</table>
<h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><h2 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h2><p>一种直观的表示椭圆弧线的方式是, 根据椭圆中心 (x, y), x 轴半径 rx, y 轴半径 ry, 开始角度 startAngle, 结束角度 endAngle.<br>但是为什么 SVG 会采用 <code>A(a) rx ry x-axis-rotation large-arc sweep x y</code> 这样的形式呢,<br>主要是因为在 SVG 中, 弧线并不是孤立的存在, 他要成为整体的一部分. 所以 SVG 采用了起始点这样的方式.<br>那么其他的 x-axis-rotation, large-arc, sweep 又是什么意思呢? 我们现在来看下面这张图.</p>
<p><img src="/img/svg/arcs02.svg" alt="ellipse"></p>
<p>当确定了两个点已经椭圆的 rx, ry 后并不能唯一确定一条椭圆弧, 实际上根据是否是大圆, 路径是否是逆时针可以产生四条 (b, c, d, e)<br>其中, large-arc-flag=0 表示小圆, sweep-flag=0 表示逆时针.</p>
<p>那么 x-axis-rotation 又是什么意思呢? b, c, d, e 产生的前提是 椭圆的 x 轴与用户坐标系的 x 轴是平行的.<br>f 图表示椭圆 x 轴相对于用户坐标系的 x 轴旋转30度所产生的椭圆弧. 灰色的部分表示原来产生的椭圆弧.</p>
<h2 id="Quadratic_Bezier"><a href="#Quadratic_Bezier" class="headerlink" title="Quadratic Bezier"></a>Quadratic Bezier</h2><p>关于贝塞尔曲线的数学含义请看<a href="http://www.wikiwand.com/en/B%C3%A9zier_curve" target="_blank" rel="external">Bézier curve</a><br>这里直观的讲一下</p>
<p><img src="/img/svg/quad01.svg" alt="quadratic bezier 01"></p>
<p>以上曲线的路径表示是: <code>&lt;path d=&quot;M200,300 Q400,50 600,300 T1000,300&quot;/&gt;</code><br>我们可以看出:<br>A 是起点, B 是终点, C 就是控制点.<br>找出 AC 的重点 D, BC 的重点 E, 连接 DE, 找出其中点 F, F 即这条曲线前半段的一个切点.</p>
<p>这里不谈数学含义, 这样的几何意义更加直观.</p>
<p>再来看 T 命令, 其实 T 命令是 Q 的一个简写.<br>其控制点 H 就是上个 Q 命令的控制点 C 关于终点 B 的对称点.<br>使用 T 命令产生的曲线往往比较顺滑 :)</p>
<h2 id="Cubic_Bezier"><a href="#Cubic_Bezier" class="headerlink" title="Cubic Bezier"></a>Cubic Bezier</h2><p>再来看一下三次贝塞尔曲线</p>
<p><img src="/img/svg/cubic01.svg" alt="cubic bezier 01"></p>
<p><code>&lt;path d=&quot;M100,200 C100,100 250,100 250,200 S400,300 400,200&quot;/&gt;</code></p>
<p>前半段曲线(C 命令) s1:<br>起点 A, 终点 B, 起点控制点 C, 终点控制点 D, 连接 AC, BD, CD;<br>找到 CD 中点 F, 连接 AC 中点 E 与 F, 连接 BD 中点 G 与 F;<br>连接 EF, FG, 连接 EF 中点 H 与 FG 中点 I;<br>I 即为前半段曲线的切点;</p>
<p>后半段曲线(S 命令) s2:<br>S 只能跟在 C 命令后使用;<br>s2 的起点 B, 终点 L, 终点控制点 K;<br>s2 的起点控制点是 s1 的终点控制点 D 关于 s1终点 B 的对称点</p>
<p>下图是更多关于三次贝塞尔曲线的例子:</p>
<p><img src="/img/svg/cubic02.svg" alt="cubic bezier 01"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://book.douban.com/subject/25941192/" target="_blank" rel="external">SVG Essentials, 2nd Edition</a></li>
<li><a href="http://book.douban.com/subject/26640057/" target="_blank" rel="external">SVG精髓（第2版）</a></li>
<li><a href="https://www.w3.org/TR/SVG/paths.html" target="_blank" rel="external">以上图片均改编自W3C SVG规范</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="external">MDN SVG Tutorial - Path</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<style>

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
</style>

<p>近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内]]>
    </summary>
    
      <category term="SVG" scheme="http://xiaoyu2er.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解 Angular Scope 的继承关系]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/"/>
    <id>http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/</id>
    <published>2016-01-22T16:00:00.000Z</published>
    <updated>2016-02-06T04:12:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="JavaScript_Prototypal_Inheritance"><a href="#JavaScript_Prototypal_Inheritance" class="headerlink" title="JavaScript Prototypal Inheritance"></a>JavaScript Prototypal Inheritance</h1><p>首先我们先来回顾以下 javascript 中出现的原型继承:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ParentScope</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.aString = <span class="string">"parent string"</span>;</span><br><span class="line">    <span class="keyword">this</span>.aNumber = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.anArray = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">this</span>.anObject = &#123;</span><br><span class="line">    <span class="string">'property1'</span>: <span class="string">'parent prop1'</span>,</span><br><span class="line">    <span class="string">'property2'</span>: <span class="string">'parent prop2'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.aFunction = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'parent output'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChildScope</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChildScope.prototype = <span class="keyword">new</span> ParentScope();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> childScope = <span class="keyword">new</span> ChildScope();</span><br></pre></td></tr></table></figure>
<p>ChildScope 原型继承自 ParentScope</p>
<p><img src="/img/angular-scope/B2FE24340A82C7B6FF9BF1CBDA5BA818.png" alt="normal prototypal inheritance"></p>
<p>如果我们要在 childScope 上查询一个定义在 parentScope 的属性, JavaScript 会先在 childScope 上查找, 如果没有查到, 那么会顺着原型链去查找. 所以以下判别式均为 <code>true</code></p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">childScope.aString === <span class="symbol">'parent</span> string'</span><br><span class="line">childScope.anArray[<span class="number">1</span>] === <span class="number">20</span></span><br><span class="line">childScope.anObject.property1 === <span class="symbol">'parent</span> prop1'</span><br><span class="line">childScope.aFunction<span class="literal">()</span> === <span class="symbol">'parent</span> output'</span><br></pre></td></tr></table></figure>
<p>如果我们做如下操作:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">childScope<span class="class">.aString</span> = <span class="string">'child string'</span></span><br></pre></td></tr></table></figure>
<p>原型链并没有被访问, 一个新的 <code>aString</code> 会被加入到 childScope 的属性中去, 新的属性会隐藏 parentScope 中的同名属性.</p>
<p><img src="/img/angular-scope/220573C69F0581E93828B5670F52C415.png" alt="shadowing"></p>
<p>假设我们做出如下操作:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">childScope<span class="class">.anArray</span>[<span class="number">1</span>] = <span class="number">22</span></span><br><span class="line">childScope<span class="class">.anObject</span><span class="class">.property1</span> = <span class="string">'child prop1'</span></span><br></pre></td></tr></table></figure>
<p>原型链被访问了. 因为 <code>anArray</code>, <code>anObject</code> 没有在 childScope 中找到.<br>新的赋值操作均在 parentScope 上进行. childScope 上没有添加任何新的属性.</p>
<p><img src="/img/angular-scope/6AB968DED1A16F35C0B07ABE855F1DE1.png" alt="follow the chain"></p>
<p>如果我们做出如下操作</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">childScope.anArray = [<span class="number">100</span>, <span class="number">555</span>]</span><br><span class="line">childScope.anObject = &#123; <span class="string">name:</span> <span class="string">'Mark'</span>, <span class="string">country:</span> <span class="string">'USA'</span> &#125;</span><br></pre></td></tr></table></figure>
<p>原型链没有被访问, childScope 会获得两个新的属性, 并且会隐藏 parentScope 上的同名属性.</p>
<p><img src="/img/angular-scope/E2B99E360766E387E06F30DE655F6883.png" alt="not following the chain"></p>
<p>仔细体会上面的三次操作. 第一第三次均是对某个属性进行赋值, 原型链并不会被访问, 由于属性并不存在, 所以新的属性将会被添加. 而第二次其实是先访问, <code>childScope.anArray</code>, <code>childScope.anObject</code>, 再对其访问的对象的某个属性进行复制.</p>
<p>总结:</p>
<ul>
<li>如果我们读取 childScope.propertyX, 而 childScope 拥有 propertyX, 那么原型链不会被访问</li>
<li>如果我们读取 childScope.propertyX, 而 childScope 并没有 propertyX, 那么原型链会被访问.</li>
<li>如果对 childScope.propertyX 进行赋值, 那么原型链并不会被访问.</li>
</ul>
<p>最后我们再来看一种情况:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> childScope.anArray</span><br><span class="line">childScope.anArray[<span class="number">1</span>] === <span class="number">22</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>我们显示删除了 childScope 的一个属性, 接着试图读取这个属性, 由于 childScope 并没有了这个属性, 所以原型链会被访问.</p>
<p><img src="/img/angular-scope/BD6A16127625E60B805FC02B117C754C.png" alt="after deleting a property"></p>
<h1 id="Angular_Scope_Inheritance"><a href="#Angular_Scope_Inheritance" class="headerlink" title="Angular Scope Inheritance"></a>Angular Scope Inheritance</h1><p>接着我们来看看 Angular 中的 scope 继承</p>
<p>以下指令会创建新的 scope, 并且会在原型上继承 父scope (即$scope.$parent, 下文两个词互为同义词):</p>
<ul>
<li>ng-repeat</li>
<li>ng-switch</li>
<li>ng-view</li>
<li>ng-controller</li>
<li>带有 <code>scope: true</code> 的指令</li>
<li>带有 <code>transclude: true</code> 的指令</li>
</ul>
<p>以下指令创建新的指令, 且在原型上 <strong>不继承</strong> 父scope:</p>
<ul>
<li>带有 <code>scope: { ... }</code> 的指令, 这会创建一个 独立的scope (isolate scope)</li>
</ul>
<p><strong>注意</strong>: 默认指令并不会创建 scope, 默认是 <code>scope: false</code>, 通常称之为 共享scope.</p>
<p>让我们来看几个例子:</p>
<h2 id="ng-include"><a href="#ng-include" class="headerlink" title="ng-include"></a>ng-include</h2><p>JS:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scope</span>.myPrimitive = <span class="number">50</span>;</span><br><span class="line"><span class="variable">$scope</span>.myObject    = &#123;aNumber: <span class="number">11</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>HTML:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123; myPrimitive &#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123; myObject.aNumber &#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span> // cannot use double curly brackets in jekyll</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/ng-template"</span> <span class="attribute">id</span>=<span class="value">"/tpl1.html"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"number"</span> <span class="attribute">ng-model</span>=<span class="value">"myPrimitive"</span>&gt;</span></span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-include</span> <span class="attribute">src</span>=<span class="value">"'/tpl1.html'"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/ng-template"</span> <span class="attribute">id</span>=<span class="value">"/tpl2.html"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"number"</span> <span class="attribute">ng-model</span>=<span class="value">"myObject.aNumber"</span>&gt;</span></span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-include</span> <span class="attribute">src</span>=<span class="value">"'/tpl2.html'"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一个 ng-include 都会创建一个 子scope, 并在原型上继承 父 scope</p>
<p><img src="/img/angular-scope/4FF01866A53AFF5A86061140DB783455.png" alt="ng-include"></p>
<p>向第一个 input 输入数字, 一个新的属性 <code>myPrimitive</code> 将会被创建, 同时隐藏 父 scope 的 <code>myPrimitive</code>;</p>
<p><img src="/img/angular-scope/3EDC9636029502E51C1E5C3F3CFF281A.png" alt="ng-include primitive"></p>
<p>向第二个 input 输入数字, 子 scope 并不会创建一个新的属性, 这时候原型继承发挥了作用.</p>
<p><img src="/img/angular-scope/DF9CE2689AC84645D641B8EE1EA8EDF4.png" alt="ng-include object"></p>
<p>第一种情况很可能不是我们期待的结果, 所以可以显式的调用 <code>$parent</code> 来解决这个问题.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">input</span> ng-model=<span class="string">"$parent.myPrimitive"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>向第一个 input 键入数字, 这时候就不会产生新的属性了. $parent 指向了 父scope. 但是 $parent 和 原型上的继承并不一定相等. 稍后我们会看到一个例子.</p>
<p><img src="/img/angular-scope/7083CECC79990759E33B8992C5A886CA.png" alt="ng-include $parent"></p>
<p>对于所有的 scope, 无论是共享的(<code>scope: false</code>), 继承的(<code>scope: true</code>), 还是孤立的(<code>scope: { ... }</code>), Angular 都会建立一个 父-子 的层级关系, 这个层级关系是根据 dom 结构的层级关系决定的, 可以通过 <code>$parent</code>, <code>$$childHead</code>, <code>$$childTail</code> 来访问.</p>
<p>为了避免刚才的例子出现的子 scope 创建新属性情况的发声, 除了使用 <code>$scope</code>, 还可以使用调用原型链上的方法.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">in</span> the parent scope</span><br><span class="line"><span class="variable">$scope</span>.setMyPrimitive = <span class="keyword">function</span>(<span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="variable">$scope</span>.myPrimitive = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ng-switch_ng-view"><a href="#ng-switch_ng-view" class="headerlink" title="ng-switch ng-view"></a>ng-switch ng-view</h2><p>ng-switch, ng-view 与 ng-include 情况类似, 不赘述.</p>
<h2 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h2><p>ng-repeat 有一点特殊.</p>
<p>JS:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scope</span>.myArrayOfPrimitives = [ <span class="number">11</span>, <span class="number">22</span> ];</span><br><span class="line"><span class="variable">$scope</span>.myArrayOfObjects    = [&#123;num: <span class="number">101</span>&#125;, &#123;num: <span class="number">202</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>HTML:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span><span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">"num in myArrayOfPrimitives"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">"num"</span>&gt;</span><span class="tag">&lt;/<span class="title">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span><span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">"obj in myArrayOfObjects"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">"obj.num"</span>&gt;</span><span class="tag">&lt;/<span class="title">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于每一次迭代, ng-repeat 都会创建一个 子scope, 并在原型上继承 父scope, <strong>但是他还会将 父scope 上的属性赋值到 子scope 上</strong>. 新的属性名就是 <code>ng-repeat=&quot;** in parentScope.property&quot;</code> 中的 **.<br>源码中的 ng-repeat 是这样的:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">childScope = scope.<span class="variable">$new</span>(); // child scope prototypically inherits from parent scope ...</span><br><span class="line">childScope[valueIdent] = <span class="keyword">value</span>; // creates a new childScope property</span><br></pre></td></tr></table></figure>
<p>如果 ** 是 primitive, 那么一份 copy 会被赋值到新的属性上. 修改 子scope 上的新属性自然不会修改 父 scope 上的属性.</p>
<p><img src="/img/angular-scope/5461BD4DFDF60DA34B9E91AE8DA8A6A6.png" alt="ng-repeat primitive"></p>
<p>如果 ** 是个 object, 那么一个 reference 会被赋值到新的 子scope 属性上. 修改这个属性, 就是修改 父scope 对应的属性.</p>
<p><img src="/img/angular-scope/091471A0D7D49CDDF1632FF25096118B.png" alt="ng-repeat object"></p>
<h2 id="ng-controller"><a href="#ng-controller" class="headerlink" title="ng-controller"></a>ng-controller</h2><p>ng-controller 也是会创建新的 子scope, 同时原型继承 父scope. 如同 ng-include, ng-switch, ng-view.<br>但是, 使用 $scope 来共享数据被认为是一种不好的操作. 因为原型链可是会一直向上追溯的.<br>如果想要共享数据, 最好使用 service.</p>
<h1 id="Angular_Directives"><a href="#Angular_Directives" class="headerlink" title="Angular Directives"></a>Angular Directives</h1><p>我们来总结以下指令中的 scope:</p>
<ol>
<li><code>scope: false</code>(默认的), 指令不会创建新的 scope, 没有继承关系. 与 $parent 共享 $scope.</li>
<li><code>scope: true</code>, 指令会创建一个 子scope, 并在原型上继承 $parent. 如果在一个 DOM 上有多个指令想要创建新的 scope, 会报错.</li>
<li><code>scope: { ... }</code>, 指令会创建一个 孤立的scope. 这在创建可重用的组件时是最好的选择. 但是, 即使如此, 指令还是希望读取 $parent 的数据. 这个时候可以使用如下符号获得:<ul>
<li><code>scope: { **: &quot;=&quot;}</code> 与 $parent 建立双向绑定.</li>
<li><code>scope: { **: &quot;@&quot;}</code> 与 $parent 建立单向绑定.</li>
<li><code>scope: { **: &quot;&amp;&quot;}</code> 绑定 $parent 的表达式.<br>想要获得相应的属性, 必须通过指令上的属性获得</li>
<li>HTML: <code>&lt;div my-directive the-Parent-Prop=parentProp&gt;</code></li>
<li>JS: <code>scope: { localProp: &#39;@theParentProp&#39; }</code><br>假设:</li>
</ul>
</li>
</ol>
<ul>
<li>HTML: <code>&lt;my-directive interpolated=&quot;&quot; twowayBinding=&quot;parentProp2&quot;&gt;</code></li>
<li>JS: <code>scope: { interpolatedProp: &#39;@interpolated&#39;, twowayBindingProp: &#39;=twowayBinding&#39; }</code></li>
<li>指令在 link 期间: <code>scope.someIsolateProp = &quot;I&#39;m isolated&quot;</code><br>其中的关系如图:<br><img src="/img/angular-scope/931892730C42AB06340A91FDFE61E2BA.png" alt="isolate scope"></li>
</ul>
<ol>
<li><code>transclude: true</code>, 指令创建了一个 “transcluded” 的子scope, 在原型上继承其 父scope. 如果上述例子同时具有<code>transclude: true</code>. 那么这个 “transcluded” scope, 和 “islolated” scope 是姊妹关系. 他们的 $parent 指向同一个 scope. 且 isolate scope 的 $$nextSibling 就是这个 “transcluded scope”. 下图反应了他们之间的关系:</li>
</ol>
<p><img src="/img/angular-scope/C6ADE4397FA38424C889CDB6C068B319.png" alt="transcluded scope"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes" target="_blank" rel="external">Angular Wiki: Understanding Scopes</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="JavaScript_Prototypal_Inheritance"><a href="#JavaScript_Prototypal_Inheritance" class="headerlink" title="JavaScript Prototypal Inhe]]>
    </summary>
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[工欲善其事 必先利其器]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/14/cool-software-collection/"/>
    <id>http://xiaoyu2er.github.io/2016/01/14/cool-software-collection/</id>
    <published>2016-01-13T16:00:00.000Z</published>
    <updated>2016-02-06T04:07:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Mac__u8F6F_u4EF6"><a href="#Mac__u8F6F_u4EF6" class="headerlink" title="Mac 软件"></a>Mac 软件</h2><ul>
<li><a href="http://archiverapp.com/" target="_blank" rel="external">Archiever: Mac下最好的解压缩工具</a></li>
<li><a href="http://stclairsoft.com/DefaultFolderX/" target="_blank" rel="external">Default Folder X: 玩转打开/保存窗口，提高文件操作效率</a></li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash: Mac下最好的 API 离线查询工具</a></li>
<li><a href="http://flashlight.nateparrott.com/" target="_blank" rel="external">Flashlight: Alfred 的替代品, 一键控制你的 Mac</a></li>
<li><a href="https://justgetflux.com/" target="_blank" rel="external">F.lux: 护眼工具</a></li>
<li><a href="https://www.iterm2.com/" target="_blank" rel="external">iTerm2: Mac 下最好的 terminal</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh: Oh My Zsh is a way of life! </a></li>
<li><a href="https://manytricks.com/moom/" target="_blank" rel="external">Moom: Mac 下最好的窗口控制器</a></li>
<li><a href="http://noiz.io/" target="_blank" rel="external">Noizio: 风声雨声键盘声</a></li>
<li><a href="http://pasteapp.me/" target="_blank" rel="external">Paste: Mac 下最好的剪贴板管理工具</a></li>
<li><a href="http://happenapps.com/#quiver" target="_blank" rel="external">Quiver: The Programmer’s Notebook</a></li>
<li><a href="https://panic.com/transmit/" target="_blank" rel="external">Transmit: Mac 下最好的文件传输助手</a></li>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code: 轻量级文本编辑器</a></li>
<li><a href="http://www.tuxera.com/products/tuxera-ntfs-for-mac/" target="_blank" rel="external">Tuxera NTFS: Mac 下最好的 NTFS 格式读取工具</a></li>
<li><a href="https://my.vmware.com/web/vmware/downloads" target="_blank" rel="external">VMware Fusion: Mac 下最好的虚拟机</a></li>
<li><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm: The smartest JavaScript IDE</a></li>
<li><a href="https://www.wunderlist.com/zh/" target="_blank" rel="external">Wunderlist: TODO list</a></li>
<li><a href="http://www.xmind.net/cn/" target="_blank" rel="external">XMind: 思维导图</a></li>
<li><a href="https://www.trankynam.com/xtrafinder/" target="_blank" rel="external">ExtraFinder: Better Mac Finder</a></li>
</ul>
<hr>
<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><ul>
<li><a href="http://gjsq.me/r5162756" target="_blank" rel="external">我的 GreenVPN 邀请码</a></li>
<li><a href="https://github.com/fivesheep/chnroutes" target="_blank" rel="external">使用vpn作为默认网络网关的时候, 不使用vpn进行对中国国内ip的访问</a></li>
<li><a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="external">解决使用 vpn 无法在 terminal 进行 git pull/push 等操作的问题</a></li>
</ul>
<h2 id="Chrome__u6D4F_u89C8_u5668_u63D2_u4EF6"><a href="#Chrome__u6D4F_u89C8_u5668_u63D2_u4EF6" class="headerlink" title="Chrome 浏览器插件"></a>Chrome 浏览器插件</h2><ul>
<li><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="external">Adblock Plus</a></li>
<li><a href="https://chrome.google.com/webstore/detail/angularjs-batarang-stable/niopocochgahfkiccpjmmpchncjoapek?hl=zh-CN" target="_blank" rel="external">AngularJS Batarang</a></li>
<li><a href="https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=zh-CN" target="_blank" rel="external">Dream Afar New Tab: An unexpected trip everyday by simply opening a new tab</a></li>
<li><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN" target="_blank" rel="external">Evernote Web Clipper</a></li>
<li><a href="https://github.com/buunguyen/octotree" target="_blank" rel="external">Octotree: Code tree for GitHub and GitLab</a></li>
<li><a href="https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86/kfjmkgngkgpgjdoealkmmajmmhpnffoj?hl=zh-CN" target="_blank" rel="external">One key Manger: Onekey enable/disable all apps/themes/extensions</a></li>
<li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop/related" target="_blank" rel="external">Postman: 接口调试</a></li>
<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN" target="_blank" rel="external">React Developer Tools: Adds React debugging tools to the Chrome Developer Tools</a></li>
<li><a href="https://chrome.google.com/webstore/detail/search-auto-focus/bnmapnomofehlbofbnfboncfpmgfnfpg?hl=zh-CN" target="_blank" rel="external">Search Auto-Focus: Auto-focuses search field on websites when you start to type</a></li>
<li><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="external">Tampermonkey: The most popular userscript manager for Blink-based browsers</a></li>
<li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?hl=zh-CN" target="_blank" rel="external">WEB前端助手(FeHelper)</a></li>
<li><a href="https://chrome.google.com/webstore/detail/wikiwand-wikipedia-modern/emffkefkbkpkgpdeeooapgaicgmcbolj?hl=zh-CN" target="_blank" rel="external">Wikiwand: 最美 Wiki</a></li>
</ul>
<h2 id="u7F51_u7AD9"><a href="#u7F51_u7AD9" class="headerlink" title="网站"></a>网站</h2><ul>
<li><a href="http://devdocs.io/offline" target="_blank" rel="external">DevDocs API 查询</a></li>
<li><a href="http://guge.suanfazu.com/" target="_blank" rel="external">谷歌镜像, 自动切换至可用</a></li>
<li><a href="https://github.com/sxyx2008/DevArticles/issues/99" target="_blank" rel="external">Google 镜像站搜集, 定期更新</a></li>
<li><a href="http://smallpdf.com/cn" target="_blank" rel="external">轻松玩转PDF</a></li>
<li><a href="https://kat.cr/" target="_blank" rel="external">各种视频资料, 国外的技术培训</a></li>
</ul>
<hr>
<h2 id="u798F_u5229"><a href="#u798F_u5229" class="headerlink" title="福利"></a>福利</h2><ul>
<li><a href="http://www.dytt.com/" target="_blank" rel="external">电影淘淘</a></li>
</ul>
<hr>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.52mac.com/" target="_blank" rel="external">我爱 Mac, 软件下载</a></li>
<li><a href="http://xclient.info/" target="_blank" rel="external">精品 Mac 应用分享</a></li>
<li><a href="https://www.zhihu.com/question/19550256" target="_blank" rel="external">OS X 平台上有哪些值得推荐的常用软件？</a></li>
<li><a href="https://www.zhihu.com/question/20036899" target="_blank" rel="external">程序员用 Mac 都有哪些必备的 app？</a></li>
<li><a href="https://www.zhihu.com/question/35050387" target="_blank" rel="external">Mac（OS X）有哪些冷门但是一但发现就无法自拔的软件？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Mac__u8F6F_u4EF6"><a href="#Mac__u8F6F_u4EF6" class="headerlink" title="Mac 软件"></a>Mac 软件</h2><ul>
<li><a href="http://archiverapp.]]>
    </summary>
    
      <category term="Chrome" scheme="http://xiaoyu2er.github.io/tags/Chrome/"/>
    
      <category term="Mac" scheme="http://xiaoyu2er.github.io/tags/Mac/"/>
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular $q 完全指南]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/"/>
    <id>http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/</id>
    <published>2016-01-07T16:00:00.000Z</published>
    <updated>2016-02-06T04:07:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Angular__24q__u5B8C_u5168_u6307_u5357"><a href="#Angular__24q__u5B8C_u5168_u6307_u5357" class="headerlink" title="Angular $q 完全指南"></a>Angular $q 完全指南</h1><p>如果想使用 $http 或者其他异步操作, 那 $q 是必须要掌握的概念啦. Let’s get started!</p>
<h2 id="u5982_u4F55_u7406_u89E3_24q_2C_deferred_object__3F"><a href="#u5982_u4F55_u7406_u89E3_24q_2C_deferred_object__3F" class="headerlink" title="如何理解$q, deferred object ?"></a>如何理解$q, deferred object ?</h2><p><a href="http://www.cnblogs.com/asnowwolf/p/3689300.html" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></p>
<blockquote>
<p>假设有一个家具厂，而它有一个VIP客户张先生。</p>
<p>有一天张先生需要一个豪华衣柜，于是，他打电话给家具厂说我需要一个衣柜，回头做好了给我送来，这个操作就叫$q.defer，也就是延期，因为这个衣柜不是现在要的，所以张先生这是在发起一个可延期的请求。</p>
<p>同时，家具厂给他留下了一个回执号，并对他说：我们做好了会给您送过去，放心吧。这叫做promise，也就是承诺。</p>
<p>这样，这个defer算是正式创建了，于是他把这件事记录在自己的日记上，并且同时记录了回执号，这叫做deferred，也就是已延期事件。</p>
<p>现在，张先生就不用再去想着这件事了，该做什么做什么，这就是“异步”的含义。</p>
<p>假设家具厂在一周后做完了这个衣柜，并如约送到了张先生家（包邮哦，亲），这就叫做deferred.resolve(衣柜)，也就是“已解决”。而这时候张先生只要签收一下这个（衣柜）参数就行了，当然，这个“邮包”中也不一定只有衣柜，还可以包含别的东西，比如厂家宣传资料、产品名录等。整个过程中轻松愉快，谁也没等谁，没有浪费任何时间。</p>
<p>假设家具厂在评估后发现这个规格的衣柜我们做不了，那么它就需要deferred.reject(理由)，也就是“拒绝”。拒绝没有时间限制，可以发生在给出承诺之后的任何时候，甚至可能发生在快做完的时候。而且拒绝时候的参数也不仅仅限于理由，还可以包含一个道歉信，违约金之类的，总之，你想给他什么就给他什么，如果你觉得不会惹恼客户，那么不给也没关系。</p>
<p>假设家具厂发现，自己正好有一个符合张先生要求的存货，它就可以用$q.when(现有衣柜)来把这个承诺给张先生，这件事就立即被解决了，皆大欢喜，张先生可不在乎你是从头做的还是现有的成品，只会惊叹于你们的效率之高。</p>
<p>假设这个家具厂对客户格外的细心，它还可能通过deferred.notify(进展情况)给张先生发送进展情况的“通知”。</p>
<p>这样，整个异步流程就圆满完成，无论成功或者失败，张先生都没有往里面投入任何额外的时间成本。</p>
<p>好，我们再扩展一下这个故事：</p>
<p>张先生这次需要做一个桌子，三把椅子，一张席梦思，但是他不希望今天收到个桌子，明天收到个椅子，后天又得签收一次席梦思，而是希望家具厂做好了之后一次性送过来，但是他下单的时候又是分别下单的，那么他就可以重新跟家具厂要一个包含上述三个承诺的新承诺，这就是$q.all(桌子承诺，椅子承诺，席梦思承诺)，</p>
<p>这样，他就不用再关注以前的三个承诺了，直接等待这个新的承诺完成，到时候只要一次性签收了前面的这些承诺就行了。</p>
</blockquote>
<h2 id="u5982_u4F55_u521B_u5EFA_promise_-1"><a href="#u5982_u4F55_u521B_u5EFA_promise_-1" class="headerlink" title="如何创建 promise -1"></a>如何创建 promise -1</h2><p>$q 支持两种写法, 第一种是类似于ES6标准构造函数写法 <code>$q(function resolver (resolve, reject) {})</code></p>
<p>注意:</p>
<pre><code>+ ES6 写法并不支持 progress/notify 的回调函数
+ 在构造函数中抛异常也并不会显式的reject the promise
</code></pre><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// var iWantResolve = <span class="literal">false</span>;</span><br><span class="line">var iWantResolve = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> es6promise() &#123;</span><br><span class="line">    return <span class="variable">$q</span>(function (resolve, reject) &#123;</span><br><span class="line">        <span class="variable">$timeout</span>(function () &#123;</span><br><span class="line">            if (iWantResolve) &#123;</span><br><span class="line">                resolve(<span class="string">"es6promise resolved"</span>);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                reject(<span class="string">"es6promise reject"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="promise__u7684_u65B9_u6CD5"><a href="#promise__u7684_u65B9_u6CD5" class="headerlink" title="promise 的方法"></a>promise 的方法</h2><ul>
<li>promise.then(successCb, errCb, notifyCb)</li>
<li>其中successCb 将在 promise resolve 后被调用, errCb 将在 promise reject 后被调</li>
<li>notifyCb 将在 deferred.notify 后被调用, 可以多次调用</li>
<li>promise.catch == promise.then(null, errCb), 用于处理之前没有被处理的 rejected promise</li>
<li>promise.finally 将最后被调用, 一般用于资源释放的清理操作</li>
</ul>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">es6promise()</span><br><span class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> (</span>data) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> (</span>err) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) output: es6promise resolved</span><br><span class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) output: es6promise reject</span><br></pre></td></tr></table></figure>
<h2 id="u5982_u4F55_u521B_u5EFA_promise_-2"><a href="#u5982_u4F55_u521B_u5EFA_promise_-2" class="headerlink" title="如何创建 promise -2"></a>如何创建 promise -2</h2><p>第二种是类似于 commonJS 的写法 $q.deferred()</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> commonJsPromise() &#123;</span><br><span class="line">    var deferred = <span class="variable">$q</span>.defer();</span><br><span class="line">    <span class="variable">$timeout</span>(function () &#123;</span><br><span class="line">        deferred.notify(<span class="string">"commonJS notify"</span>);</span><br><span class="line">        if (iWantResolve) &#123;</span><br><span class="line">            deferred.resolve(<span class="string">"commonJS resolved"</span>);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            deferred.reject(<span class="string">"commonJS reject"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    return deferred.promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">commonJsPromise()</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> /** success callback**/(data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="keyword">function</span> /** error callback **/ (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;, <span class="keyword">function</span> /** progress callback **/ (<span class="keyword">update</span>) &#123;</span><br><span class="line">        console.log(update);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) output: commonJS notify commonJS resolved</span><br><span class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) output: commonJS notify commonJS reject</span><br></pre></td></tr></table></figure>
<h3 id="24q-all"><a href="#24q-all" class="headerlink" title="$q.all"></a>$q.all</h3><ul>
<li><code>$q.all([promise1, promise1])</code> 接受一个包含若干个 promise 的数组,</li>
<li>等所有的 promise resolve 后, 其本身 resolve 包含上述结果的数组 [data1, data2]</li>
<li>如果上述 promise 有一个 reject, 那么$q.all() 会把这个 rejected promise 作为其 rejected promise (只有一个哦)</li>
<li>progress/notify 的 callback 并没有用</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>.all([es6promise(), commonJsPromise()])</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (dataArr) &#123;</span><br><span class="line">        console.log(<span class="string">"$q.all: "</span>, dataArr);</span><br><span class="line">    &#125;, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">        console.log(<span class="string">"$q.all: "</span>, err)</span><br><span class="line">    &#125;, <span class="keyword">function</span> /** unnecessary **/ (<span class="keyword">update</span>) &#123;</span><br><span class="line">        console.log(<span class="string">"$q.all"</span>, update);</span><br><span class="line">    &#125;);</span><br><span class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) output: <span class="variable">$q</span>.all:  [<span class="string">"es6promise resolved"</span>, <span class="string">"commonJS resolved"</span>]</span><br><span class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) output: <span class="variable">$q</span>.all:  es6promise reject</span><br></pre></td></tr></table></figure>
<h3 id="24q-reject_2C__24q-when_2C__24q-resolve"><a href="#24q-reject_2C__24q-when_2C__24q-resolve" class="headerlink" title="$q.reject, $q.when, $q.resolve"></a>$q.reject, $q.when, $q.resolve</h3><ul>
<li>$q.reject() 立即返回一个rejected 的 promise, 在链式调用的时候很有用</li>
<li>$q.resolve == $q.when(value, successCb, errorCb, progressCb)</li>
<li>value 可能是一个 then-able 的 obj(即可以是 $q.defer() 返回的, 也可以是其他库产生的), 也可能是任意数据,  但是 $q.when 最终都会返回一个 promise</li>
<li>$q.when 既可以写成上述的构造函数形式, 也可以写成 $q.when(value).then(fn, fn, fn) 的形式</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>.reject(<span class="string">"instant reject"</span>)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">// output: instant reject</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span>.<span class="keyword">when</span>(commonJsPromise(),</span><br><span class="line">    <span class="keyword">function</span> /** success callback **/(data) &#123;</span><br><span class="line">        console.log(<span class="string">"$q.when success callback function: "</span> + data);</span><br><span class="line">        return <span class="string">"$q.when success callback return another value"</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (data) &#123;</span><br><span class="line">        console.log(<span class="string">"$q.when then function:"</span> + data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) output:</span><br><span class="line">// <span class="variable">$q</span>.<span class="keyword">when</span> success callback functionL: commonJS resolved</span><br><span class="line">// <span class="variable">$q</span>.<span class="keyword">when</span> <span class="keyword">then</span> function:<span class="variable">$q</span>.<span class="keyword">when</span> success callback <span class="keyword">return</span> another <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) output:</span><br><span class="line">// <span class="variable">$q</span>.<span class="keyword">when</span> err callback function: commonJS reject</span><br><span class="line">// <span class="variable">$q</span>.<span class="keyword">when</span> <span class="keyword">then</span> function:undefined</span><br><span class="line"></span><br><span class="line"><span class="variable">$q</span>.<span class="keyword">when</span>(<span class="string">"some value"</span>, <span class="keyword">function</span> (data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// output: <span class="keyword">some</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure>
<h2 id="promise_chains__u94FE_u5F0F_u8C03_u7528"><a href="#promise_chains__u94FE_u5F0F_u8C03_u7528" class="headerlink" title="promise chains 链式调用"></a>promise chains 链式调用</h2><p>任何在 successCb, errCb 中返回的非 $q.reject()对象, 都将成为一个 resolve 的 promise.<br>所以可以出现如下语法<br><code>promise.then().then().then()</code></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>.<span class="keyword">when</span>(<span class="string">"1"</span>)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        return <span class="variable">$q</span>.reject(<span class="number">2</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">catch</span>(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// output: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.angularjs.org/api/ng/service/$q" target="_blank" rel="external">AngularJS Documentation for $q</a></li>
<li><a href="http://www.cnblogs.com/asnowwolf/p/3689300.html" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></li>
<li><a href="http://www.syntaxsuccess.com/viewarticle/angular-promise-chaining-explained" target="_blank" rel="external">Angular Promise Chaining Explained</a></li>
<li><a href="http://www.bennadel.com/blog/2735-q-when-is-the-missing-q-resolve-method-in-angularjs.htm" target="_blank" rel="external">$q.when() Is The Missing $q.resolve() Method In AngularJS</a></li>
<li><a href="http://stackoverflow.com/questions/16770821/how-does-angular-q-when-work" target="_blank" rel="external">How does Angular $q.when work?</a></li>
<li><a href="https://github.com/angular/angular.js/issues/4493" target="_blank" rel="external">$q.when(promise) calls resolve() instead of reject()</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Angular__24q__u5B8C_u5168_u6307_u5357"><a href="#Angular__24q__u5B8C_u5168_u6307_u5357" class="headerlink" title="Angular $q 完全指南"><]]>
    </summary>
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular 全局函数]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/02/angular-gloabal-api/"/>
    <id>http://xiaoyu2er.github.io/2016/01/02/angular-gloabal-api/</id>
    <published>2016-01-01T16:00:00.000Z</published>
    <updated>2016-01-31T03:55:49.000Z</updated>
    <content type="html"><![CDATA[<p>AngularJS API Docs - Global APIs</p>
<p>此文章的 API 参考 <a href="https://code.angularjs.org/1.4.7/docs/api" target="_blank" rel="external">Version 1.4.7</a>.</p>
<h3 id="angular-forEach_3A__u8FED_u4EE3_u51FD_u6570"><a href="#angular-forEach_3A__u8FED_u4EE3_u51FD_u6570" class="headerlink" title="angular.forEach: 迭代函数"></a>angular.forEach: 迭代函数</h3><ul>
<li>用法: <code>angular.forEach(obj, iterator, [context])</code></li>
<li>解释: obj 为迭代对象, 可以是一个 object, 也可以是 array, 根据 obj 的类型, 迭代函数iterator的参数理解稍微不同(详见示例), contenxt 可选参数, 是iterator<br>执行的上下文.</li>
<li>注意:<ul>
<li><code>angular.forEach</code>不迭代继承的属性, 因为内部使用了<code>hasOwnProperty</code>方法来过滤</li>
<li>与<code>Array.prototype.forEach</code>不同, 当 obj 为不可迭代对象时, 比如 undefined, null, number, <code>angular.forEach</code>返回 obj 本身, iterator并不会执行</li>
</ul>
</li>
<li>示例:</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;name: <span class="string">"Jerry"</span>, gender: <span class="string">"male"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> = [];</span><br><span class="line">angular.forEach(person, function (value, key, obj) &#123;</span><br><span class="line">    this.push(key + <span class="string">": "</span> + value);</span><br><span class="line">&#125;, <span class="literal">result</span>);</span><br><span class="line">$log.debug(<span class="literal">result</span>); // [<span class="string">"name: Jerry"</span>, <span class="string">"gender: male"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friends = [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>, <span class="string">"Donald"</span>];</span><br><span class="line">angular.forEach(friends, function (value, index, arr) &#123;</span><br><span class="line">    this.push(index + <span class="string">": "</span> + value);</span><br><span class="line">&#125;, <span class="literal">result</span>);</span><br><span class="line">$log.debug(<span class="literal">result</span>); // [<span class="string">"name: Jerry"</span>, <span class="string">"gender: male"</span>, <span class="string">"0: Tom"</span>, <span class="string">"1: Jerry"</span>, <span class="string">"2: Donald"</span>]</span><br><span class="line"></span><br><span class="line">$log.debug(angular.forEach(undefined)); // undefined</span><br><span class="line">$log.debug(angular.forEach(null)); // null</span><br><span class="line">$log.debug(angular.forEach(<span class="number">1</span>, function ()&#123; $log.debug(<span class="string">"in iterator"</span>)&#125;)); // <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="angular-extend"><a href="#angular-extend" class="headerlink" title="angular.extend"></a>angular.extend</h3><ul>
<li>功能: 扩展函数, 将src(s)的可枚举属性复制到dst中;</li>
<li>用法: <code>angular.extend(dst, src...);</code></li>
<li>注意<ul>
<li>如果不想保留原有的 obj 不被改变, 可以使用<code>{}</code>作为第一个参数: <code>var obj = angular.extend({}, obj1, obj2)</code></li>
<li><code>angular.extend</code>不支持递归merge(deep copy), 如果需要需要使用<code>angular.merge</code></li>
</ul>
</li>
<li>示例</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;name: <span class="string">"Jerry"</span>&#125;;</span><br><span class="line">var obj2 = &#123;gender: <span class="string">"male"</span>&#125;;</span><br><span class="line">var obj3 = &#123;phone: <span class="string">"13312345678"</span>&#125;;</span><br><span class="line">angular.extend(obj1, obj2, obj3);</span><br><span class="line"></span><br><span class="line"><span class="variable">$log</span>.debug(obj1); // &#123;gender: <span class="string">"male"</span>, name: <span class="string">"Jerry"</span>, phone:<span class="string">"13312345678"</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="angular-merge"><a href="#angular-merge" class="headerlink" title="angular.merge"></a>angular.merge</h3><ul>
<li>功能: 扩展函数, 深度拷贝</li>
<li>用法: <code>angular.extend(dst, src...);</code> 与<code>angular.extend</code>使用方法一致</li>
<li>注意: 在1.3.0版本中无此功能</li>
</ul>
<h3 id="angular-noop"><a href="#angular-noop" class="headerlink" title="angular.noop"></a>angular.noop</h3><ul>
<li>功能: 啥都不干的函数</li>
<li>用法:</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(callback) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="literal">result</span> = calculateResult();</span><br><span class="line">  (callback || angular.noop)(<span class="literal">result</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="angular-identity"><a href="#angular-identity" class="headerlink" title="angular.identity"></a>angular.identity</h3><ul>
<li>功能: 返回第一个参数</li>
<li>用法:</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> transformer(transformationFn, <span class="keyword">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (transformationFn || angular.identity)(<span class="keyword">value</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="angular-copy"><a href="#angular-copy" class="headerlink" title="angular.copy"></a>angular.copy</h3><ul>
<li>用法: <code>angular.copy(source, [dest])</code></li>
<li>详解: !!此 API 的实践效果与官方的有效出入.<ul>
<li>首先清空 dest(如果dest是一个object, array, 否则不修改),</li>
<li>然后生成 <code>source</code> 的一个深拷贝, 并将深拷贝复制到 dest 中(如果 dest 是一个object, array且 source 与 dest 数据结构相同, 否则 dest 不做修改)</li>
<li>返回 dest</li>
</ul>
</li>
<li>注意<ul>
<li>如果没有<code>destination</code>参数, 那么source的深拷贝将被创建, 且返回</li>
<li>如果 source 和 destination 相同, 那么抛出一个错误</li>
</ul>
</li>
</ul>
<h3 id="angular-equals_28o1_2C_o2_29"><a href="#angular-equals_28o1_2C_o2_29" class="headerlink" title="angular.equals(o1, o2)"></a>angular.equals(o1, o2)</h3><ul>
<li>功能: 比较o1, o2是否相等, 包括: obj, arr, primitives, regExp,</li>
<li>详解:<ul>
<li>满足以下条件 angular.equals 返回 true</li>
<li>满足 ===</li>
<li>obj 属性或者 array 的元素递归满足 angular.equals == true</li>
<li>angular.equals(NaN, NaN) === true</li>
<li>字面量相等的 regExp 相等</li>
<li>带 $ 的属性和 function 将会被忽略, 但是只比较两个匿名函数会返回 false</li>
<li>scope, DOM 只能按照 === 去判断</li>
</ul>
</li>
</ul>
<h3 id="angular-bind_28self_2C_fn_2C_args_29"><a href="#angular-bind_28self_2C_fn_2C_args_29" class="headerlink" title="angular.bind(self, fn, args)"></a>angular.bind(self, fn, args)</h3><ul>
<li>功能: function.bind 与 偏函数的结合</li>
<li>示例: <a href="http://stackoverflow.com/questions/30529933/what-is-the-use-of-angular-bind-in-angularjs-where-to-use-it" target="_blank" rel="external">what is the use of angular.bind in angularjs? Where to use it?</a></li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="function"><span class="keyword">function</span> <span class="params">(greeting, punctuation)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> greeting + <span class="string">' '</span> + <span class="keyword">this</span>.user + punctuation;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> object = &#123; <span class="string">'user'</span>: <span class="string">'fred'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bound = angular.bind(greet, object, <span class="string">'hi'</span>);</span><br><span class="line">bound(<span class="string">'!'</span>); <span class="comment">// → 'hi fred!'</span></span><br></pre></td></tr></table></figure>
<h3 id="angular-toJson"><a href="#angular-toJson" class="headerlink" title="angular.toJson"></a>angular.toJson</h3><ul>
<li>用法: angular.toJson(obj, [pretty])</li>
<li>功能: 将 obj 按照 json 的格式输出</li>
<li>解释: 如果 pretty 设置, pretty=true &lt;=&gt; pretty=2, 即缩进的空格个数</li>
</ul>
<h3 id="angular-bootstrap"><a href="#angular-bootstrap" class="headerlink" title="angular.bootstrap"></a>angular.bootstrap</h3><ul>
<li>功能: 手动启动一个 angular 的应用, 此乃高级内容, 暂做简要记录, 还须深入理解</li>
<li>用法: <code>angular.bootstrap(element, [modules], [config])</code></li>
<li>示例:</li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> <span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"WelcomeController"</span>&gt;</span></span><br><span class="line">    </span><span class="expression">&#123;&#123;<span class="variable">greeting</span>&#125;&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'demo'</span>, [])</span><br><span class="line">            .controller(<span class="string">'WelcomeController'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">                $scope.greeting = <span class="string">'Welcome!'</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'demo'</span>]);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="angular-element_3A__u5305_u88F9_DOM__u5143_u7D20_u4F5C_u4E3A_u4E00_u4E2A_jQuery_28jqLite_29__u7684_u5143_u7D20"><a href="#angular-element_3A__u5305_u88F9_DOM__u5143_u7D20_u4F5C_u4E3A_u4E00_u4E2A_jQuery_28jqLite_29__u7684_u5143_u7D20" class="headerlink" title="angular.element: 包裹 DOM 元素作为一个 jQuery(jqLite) 的元素"></a>angular.element: 包裹 DOM 元素作为一个 jQuery(jqLite) 的元素</h3><ul>
<li>详解: angular 中的 element 都是 jQuery(jqLite)元素; jqLite 的使用将会在另外的文章中给出介绍</li>
</ul>
<h3 id="angular-module"><a href="#angular-module" class="headerlink" title="angular.module"></a>angular.module</h3><ul>
<li>用法: <code>angular.module(name, [requires], [configFn])</code></li>
<li>功能: 用来创建, 注册, 获得 angular 的 module</li>
<li>注意:<ul>
<li>传入一个参数为获取, 传入多个参数为创建</li>
</ul>
</li>
</ul>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><ul>
<li>angular.lowercase: 字符串转小写</li>
<li>angular.uppercase: 字符串转大写</li>
<li>angular.isUndefined</li>
<li>angular.isDefined</li>
<li>angular.isObject<ul>
<li>功能: 判断参数是否是一个 object 但是不是 null, 注意 array 是 object</li>
</ul>
</li>
<li>angular.isString</li>
<li>angular.isNumber</li>
<li>angular.isDate</li>
<li>angular.isArray</li>
<li>angular.isFunction</li>
<li>angular.isElement<ul>
<li>功能: 判断参数是否是一个 DOM 元素或者一个 jQuery 包裹的元素</li>
</ul>
</li>
<li>angular.reloadWithDebugInfo: 重启应用, 打开 debug</li>
<li>angular.injector, 高级内容, 未来深入理解</li>
<li>angular.fromJson</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>AngularJS API Docs - Global APIs</p>
<p>此文章的 API 参考 <a href="https://code.angularjs.org/1.4.7/docs/api" target="_blank" rel="external">Ve]]>
    </summary>
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello 2016]]></title>
    <link href="http://xiaoyu2er.github.io/2016/01/01/hello-2016/"/>
    <id>http://xiaoyu2er.github.io/2016/01/01/hello-2016/</id>
    <published>2015-12-31T16:00:00.000Z</published>
    <updated>2016-02-06T04:07:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>千里之行, 始于足下</p>
</blockquote>
<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>新年的第一天, 捣腾了一天, 终于把自己的 github 博客搭建起来了, 大学期间就一直有写技术博客的想法, 无奈天性懒惰, 所以每次都夭折了.</p>
<p>这次是因为刚刚换了工作, 学习劲头非常强劲, 也是部门老大鼓励, 所以希望这次的尝试可以坚持下去.</p>
<p>第一篇博客就来记录一下这个博客是如何搭建的.</p>
<hr>
<h2 id="u6B63_u6587"><a href="#u6B63_u6587" class="headerlink" title="正文"></a>正文</h2><p>此博客是使用 jekyll 搭建, github 托管, 同时主题几乎完全采用 <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="external">Huxpro</a>,<br>(which is derived from <a href="https://github.com/IronSummitMedia/startbootstrap-clean-blog-jekyll" target="_blank" rel="external">start bootstrap</a>, 我们不生产代码, 我们只是 github 的搬运工 :)</p>
<p>Hux 的教程写的非常详细, 所以搭建起来非常简单, 在此谢过. (具体的实现细节在此不再赘述, 可以直接参考 Hux 的解决方案, 他的 <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="external"><code>README</code></a> 写的非常好)</p>
<p>因为 Hux 的博客中添加了很多默认主题没有的功能, 比如: 标签, 翻页, 评论. 所以配置起来还有些麻烦, 如果仅仅是发表文章, 建议使用一些简单的主题, 搜索 <code>free jekyll theme</code><br>就会有很多.</p>
<h3 id="u4FEE_u6539"><a href="#u4FEE_u6539" class="headerlink" title="修改"></a>修改</h3><ul>
<li><p>除了直接使用 Hux 的主题之外, 我还做出了一些自己的修改, 首先我删除了 作品 页, 原因嘛, 也是自己还没有什么可以拿的出手的作品, 不过 Hux 的作品页我还保存着, 希望未来可以使用.</p>
</li>
<li><p>我还添加了一个 归类 页, 用于归档自己的文章, 样式采用了原先 标签 页的样式. (因为我希望按照年来归档, 所以还费了一番周折, 参考了 <a href="http://stackoverflow.com/questions/19086284/jekyll-liquid-templating-how-to-group-blog-posts-by-year" target="_blank" rel="external">stackoverflow</a> 上的答案)</p>
</li>
<li><p>添加了一个联系方式: email</p>
</li>
<li><p>about 页面, 隐藏了中英文的切换功能和简历下载功能, 这个我会稍后加上.</p>
</li>
</ul>
<h3 id="u6F02_u4EAE_u7684_u5934_u56FE"><a href="#u6F02_u4EAE_u7684_u5934_u56FE" class="headerlink" title="漂亮的头图"></a>漂亮的头图</h3><p>仍有很多头图我是直接沿用了 Huxpro 的图片, 其他的资源我都是从网上免费获得的, 比如 <a href="http://www.freewordpressheaders.com/gallery/" target="_blank" rel="external">http://www.freewordpressheaders.com/gallery/</a>,<br><a href="https://www.zhihu.com/question/38173599" target="_blank" rel="external">知乎: 有什么图片、视频是符合你对《三体》世界、场景的想象的？</a></p>
<hr>
<h2 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h2><p>非常欢迎交换博客链接, 我会放到<code>我的朋友</code>一栏.</p>
<p>2016, 希望如开头所说, 可以坚持写博客, 2016, 加油!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>千里之行, 始于足下</p>
</blockquote>
<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>新年的第一天,]]>
    </summary>
    
      <category term="Blog" scheme="http://xiaoyu2er.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
