<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoyu2er&#39;s blog</title>
  <subtitle>行万里路, 读万卷书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoyu2er.github.io/"/>
  <updated>2016-06-09T10:18:16.000Z</updated>
  <id>http://xiaoyu2er.github.io/</id>
  
  <author>
    <name>xiaoyu2er</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>44个 Javascript 变态题解析 (上)</title>
    <link href="http://xiaoyu2er.github.io/2016/06/06/44-js-puzzles-part1/"/>
    <id>http://xiaoyu2er.github.io/2016/06/06/44-js-puzzles-part1/</id>
    <published>2016-06-05T16:00:00.000Z</published>
    <updated>2016-06-09T10:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>原题来自: <a href="http://javascript-puzzlers.herokuapp.com/" target="_blank" rel="external">javascript-puzzlers</a></p>
<p>读者可以先去做一下感受感受. 当初笔者的成绩是 21/44…</p>
<p>当初笔者做这套题的时候不仅怀疑智商, 连人生都开始怀疑了….</p>
<p>不过, 对于基础知识的理解是深入编程的前提. 让我们一起来看看这些变态题到底变态不变态吧!</p>
<h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].<span class="built_in">map</span>(<span class="built_in">parseInt</span>)</div></pre></td></tr></table></figure>
<p>知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array/map</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt" target="_blank" rel="external">Number/parseInt</a></li>
</ul>
<p>首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值</p>
<p>其中回调函数接受三个参数 currentValue, index, arrary;</p>
<p>而题目中, map只传入了回调函数–parseInt.</p>
<p>其次, parseInt 只接受两个两个参数 string, radix(基数). radix的合法区间是2-36. 默认是10.</p>
<p>所以本题即问</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>首先后两者参数不合法. 第一个笔者猜测0和不传一样被认为是10.</p>
<p>所以答案是 <code>[1, NaN, NaN]</code></p>
<h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">typeof</span> <span class="literal">null</span>, <span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>]</div></pre></td></tr></table></figure>
<p>两个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">Operators/typeof</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">Operators/instanceof</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">Operators/instanceof(中)</a></li>
</ul>
<p>typeof 返回一个表示类型的字符串.</p>
<p>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上.</p>
<p>这个题可以直接看链接… 因为 <code>typeof null === &#39;object&#39;</code> 自语言之初就是这样….</p>
<p>typeof 的结果请看下表:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">type         result</div><div class="line">Undefined   <span class="string">"undefined"</span></div><div class="line">Null        <span class="string">"object"</span></div><div class="line"><span class="built_in">Boolean</span>     <span class="string">"boolean"</span></div><div class="line"><span class="built_in">Number</span>      <span class="string">"number"</span></div><div class="line"><span class="built_in">String</span>      <span class="string">"string"</span></div><div class="line"><span class="built_in">Symbol</span>      <span class="string">"symbol"</span></div><div class="line">Host object Implementation-dependent</div><div class="line"><span class="built_in">Function</span>    <span class="string">"function"</span></div><div class="line"><span class="built_in">Object</span>      <span class="string">"object"</span></div></pre></td></tr></table></figure>
<p>所以答案 <code>[object, false]</code></p>
<h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].reduce(Math.pow), [].reduce(Math.pow) ]</div></pre></td></tr></table></figure>
<p>知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">Array/Reduce</a></li>
</ul>
<p><code>arr.reduce(callback[, initialValue])</code></p>
<p>reduce接受两个参数, 一个回调, 一个初始值.</p>
<p>回调函数接受四个参数 <code>previousValue, currentValue, currentIndex, array</code></p>
<p>需要注意的是 <code>If the array is empty and no initialValue was provided, TypeError would be thrown.</code></p>
<p>所以第二个表达式会报异常. 第一个表达式等价于 <code>Math.pow(3, 2) =&gt; 9; Math.pow(9, 1) =&gt;9</code></p>
<p>答案 <code>an error</code></p>
<h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">val</span> = <span class="string">'smtg'</span>;</div><div class="line">console.log(<span class="string">'Value is '</span> + (<span class="keyword">val</span> === <span class="string">'smtg'</span>) ? <span class="string">'Something'</span> : <span class="string">'Nothing'</span>);</div></pre></td></tr></table></figure>
<p>两个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">Operators/Operator_Precedence</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">Operators/Conditional_Operator</a></li>
</ul>
<p>简而言之 <code>+</code> 的优先级 大于 <code>?</code></p>
<p>所以原题等价于 <code>&#39;Value is true&#39; ? &#39;Somthing&#39; : &#39;Nonthing&#39;</code> 而不是 <code>&#39;Value is&#39; + (true ? &#39;Something&#39; : &#39;Nonthing&#39;)</code></p>
<p>答案 <code>&#39;Value is Something&#39;</code></p>
<h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'World!'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这个相对简单, 一个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" target="_blank" rel="external">Hoisting</a></li>
</ul>
<p>在 JavaScript中， functions 和 variables 会被提升。变量提升是JavaScript将声明移至作用域 scope (全局域或者当前函数作用域) 顶部的行为。</p>
<p>这个题目相当于</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">name</span> = <span class="string">'World!'</span>;</div><div class="line">(function () &#123;</div><div class="line">    var <span class="built_in">name</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">typeof</span> <span class="built_in">name</span> === <span class="string">'undefined'</span>) &#123;</div><div class="line">        <span class="built_in">name</span> = <span class="string">'Jack'</span>;</div><div class="line">        console.<span class="built_in">log</span>(<span class="string">'Goodbye '</span> + <span class="built_in">name</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        console.<span class="built_in">log</span>(<span class="string">'Hello '</span> + <span class="built_in">name</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>所以答案是 <code>&#39;Goodbye Jack&#39;</code></p>
<h2 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var END = Math.pow(<span class="number">2</span>, <span class="number">53</span>)<span class="comment">;</span></div><div class="line">var START = END - <span class="number">100</span><span class="comment">;</span></div><div class="line">var <span class="built_in">count</span> = <span class="number">0</span><span class="comment">;</span></div><div class="line">for (var i = START<span class="comment">; i &lt;= END; i++) &#123;</span></div><div class="line">    <span class="built_in">count</span>++<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">console.log(<span class="built_in">count</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>一个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity" target="_blank" rel="external">Infinity</a></li>
</ul>
<p>在 JS 里, Math.pow(2, 53) == 9007199254740992 是可以表示的最大值. 最大值加一还是最大值. 所以循环不会停.</p>
<h2 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">ary[<span class="number">10</span>] = <span class="number">10</span>;</div><div class="line">ary.filter(<span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123; <span class="keyword">return</span> x === <span class="literal">undefined</span>;&#125;);</div></pre></td></tr></table></figure>
<p>答案是 <code>[]</code></p>
<p>看一篇文章理解稀疏数组</p>
<ul>
<li><a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/16/2687165.html" target="_blank" rel="external">译 JavaScript中的稀疏数组与密集数组</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="external">Array/filter</a></li>
</ul>
<p>我们来看一下 Array.prototype.filter 的 polyfill:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun<span class="regexp">/*, thisArg*/</span></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> res = [];</div><div class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t) &#123; <span class="comment">// 注意这里!!!</span></div><div class="line">        <span class="keyword">var</span> val = t[i];</div><div class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t)) &#123;</div><div class="line">          res.push(val);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span>in ary; =&gt; true</div><div class="line"><span class="symbol">3 </span>in ary; =&gt; false</div><div class="line"><span class="symbol">10 </span>in ary; =&gt; true</div></pre></td></tr></table></figure>
<p>也就是说 从 3 - 9 都是没有初始化的’坑’!, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些’坑’的.</p>
<h2 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">two</span>   = 0.2</div><div class="line"><span class="keyword">var</span> <span class="keyword">one</span>   = 0.1</div><div class="line"><span class="keyword">var</span> eight = 0.8</div><div class="line"><span class="keyword">var</span> six   = 0.6</div><div class="line">[<span class="keyword">two</span> - <span class="keyword">one</span> == <span class="keyword">one</span>, eight - six == <span class="keyword">two</span>]</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://ourjs.com/detail/54695381bc3f9b154e000046" target="_blank" rel="external">JavaScript的设计缺陷?浮点运算：0.1 + 0.2 != 0.3</a></li>
</ul>
<p>IEEE 754标准中的浮点数并不能精确地表达小数</p>
<p>那什么时候精准, 什么时候不经准呢? 笔者也不知道…</p>
<p>答案 <code>[true, false]</code></p>
<h2 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCase</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span>(value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Case A'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'B'</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Case B'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="literal">undefined</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'undefined'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Do not know!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">showCase(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'A'</span>));</div></pre></td></tr></table></figure>
<p>两个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch" target="_blank" rel="external">Statements/switch</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="external">String</a></li>
</ul>
<p>switch 是严格比较, String 实例和 字符串不一样.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s_prim = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> s_obj = <span class="keyword">new</span> <span class="built_in">String</span>(s_prim);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s_prim); <span class="comment">// "string"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s_obj);  <span class="comment">// "object"</span></div><div class="line"><span class="built_in">console</span>.log(s_prim === s_obj); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>答案是 <code>&#39;Do not know!&#39;</code></p>
<h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCase2</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span>(value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Case A'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'B'</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Case B'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="literal">undefined</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'undefined'</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Do not know!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">showCase2(<span class="built_in">String</span>(<span class="string">'A'</span>));</div></pre></td></tr></table></figure>
<p>解释:<br><code>String(x) does not create an object but does return a string, i.e. typeof String(1) === &quot;string&quot;</code></p>
<p>还是刚才的知识点, 只不过 String 不仅是个构造函数 直接调用返回一个字符串哦.</p>
<p>答案 <code>&#39;Case A&#39;</code></p>
<h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">isOdd</span>(num) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">num</span> % <span class="number">2</span> == <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="title">isEven</span>(num) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">num</span> % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="title">isSane</span>(num) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">isEven(num)</span> || isOdd(num);</div><div class="line">&#125;</div><div class="line">var values = [<span class="number">7</span>, <span class="number">4</span>, '<span class="number">13</span>', -<span class="number">9</span>, Infinity];</div><div class="line">values.map(isSane);</div></pre></td></tr></table></figure>
<p>一个知识点</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder" target="_blank" rel="external">Arithmetic_Operators#Remainder</a></li>
</ul>
<p>此题等价于</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">7</span> % <span class="number">2</span> =&gt; <span class="number">1</span></div><div class="line"><span class="number">4</span> % <span class="number">2</span> =&gt; <span class="number">0</span></div><div class="line">'<span class="number">13</span>' % <span class="number">2</span> =&gt; <span class="number">1</span></div><div class="line"><span class="number">-9</span> % % <span class="number">2</span> =&gt; <span class="number">-1</span></div><div class="line">Infinity % <span class="number">2</span> =&gt; NaN</div></pre></td></tr></table></figure>
<p>需要注意的是 余数的正负号随第一个操作数.</p>
<p>答案 <code>[true, true, true, false, false]</code></p>
<h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">3</span>, <span class="number">8</span>)</span></span></div><div class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">3</span>, <span class="number">2</span>)</span></span></div><div class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">3</span>, <span class="number">0</span>)</span></span></div></pre></td></tr></table></figure>
<p>第一个题讲过了, 答案 <code>3, NaN, 3</code></p>
<h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.<span class="built_in">isArray</span>( <span class="built_in">Array</span>.prototype )</div></pre></td></tr></table></figure>
<p>一个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype" target="_blank" rel="external">Array/prototype</a></li>
</ul>
<p>一个鲜为人知的实事: <code>Array.prototype =&gt; []</code>;</p>
<p>答案: <code>true</code></p>
<h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a == <span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"wut"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="external">JavaScript-Equality-Table</a></li>
</ul>
<p>一图胜千言</p>
<p><img src="/img/js-puzzles/if.png" alt="js-puzzles/if.png"><br><img src="/img/js-puzzles/equality.png" alt="js-puzzles/equality.png"></p>
<p>答案: <code>false</code></p>
<h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[]</span>==<span class="string">[]</span></div></pre></td></tr></table></figure>
<p><code>==</code> 是万恶之源, 看上图</p>
<p>答案是 <code>false</code></p>
<h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">'<span class="number">5</span>' + <span class="number">3</span></div><div class="line">'<span class="number">5</span>' - <span class="number">3</span></div></pre></td></tr></table></figure>
<p>两个知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition" target="_blank" rel="external">Arithmetic_Operators#Addition</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction" target="_blank" rel="external">Arithmetic_Operators#Subtraction</a></li>
</ul>
<p><code>+</code> 用来表示两个数的和或者字符串拼接, <code>-</code>表示两数之差.</p>
<p>请看例子, 体会区别:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; '<span class="number">5</span>' + <span class="number">3</span></div><div class="line">'<span class="number">53</span>'</div><div class="line">&gt; <span class="number">5</span> + '<span class="number">3</span>'</div><div class="line">'<span class="number">53</span>'</div><div class="line">&gt; <span class="number">5</span> - '<span class="number">3</span>'</div><div class="line"><span class="number">2</span></div><div class="line">&gt; '<span class="number">5</span>' - <span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line">&gt; '<span class="number">5</span>' - '<span class="number">3</span>'</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>也就是说 <code>-</code> 会尽可能的将两个操作数变成数字, 而 <code>+</code> 如果两边不都是数字, 那么就是字符串拼接.</p>
<p>答案是 <code>&#39;53&#39;, 2</code></p>
<h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span>+ - + + + - + <span class="number">1</span></div></pre></td></tr></table></figure>
<p>这里应该是(倒着看)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> + <span class="function">(<span class="params">a</span>)	 =&gt;</span> <span class="number">2</span></div><div class="line">a = - <span class="function">(<span class="params">b</span>) =&gt;</span> <span class="number">1</span></div><div class="line">b = + <span class="function">(<span class="params">c</span>) =&gt;</span> <span class="number">-1</span></div><div class="line">c = + <span class="function">(<span class="params">d</span>) =&gt;</span> <span class="number">-1</span></div><div class="line">d = + <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="number">-1</span></div><div class="line">e = + <span class="function">(<span class="params">f</span>) =&gt;</span> <span class="number">-1</span></div><div class="line">f = - <span class="function">(<span class="params">g</span>) =&gt;</span> <span class="number">-1</span></div><div class="line">g = + <span class="number">1</span>   =&gt; <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>所以答案 <code>2</code></p>
<h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = <span class="built_in">Array</span>(<span class="number">3</span>);</div><div class="line">ary[<span class="number">0</span>]=<span class="number">2</span></div><div class="line">ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123; <span class="keyword">return</span> <span class="string">'1'</span>; &#125;);</div></pre></td></tr></table></figure>
<p>稀疏数组. 同第7题.</p>
<p>题目中的数组其实是一个长度为3, 但是没有内容的数组, array 上的操作会跳过这些未初始化的’坑’.</p>
<p>所以答案是 <code>[&quot;1&quot;, undefined × 2]</code></p>
<h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sidEffecting</span>(<span class="params">ary</span>) </span>&#123;</div><div class="line">  ary[<span class="number">0</span>] = ary[<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a,b,c</span>) </span>&#123;</div><div class="line">  c = <span class="number">10</span></div><div class="line">  sidEffecting(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line">bar(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>这是一个大坑, 尤其是涉及到 ES6语法的时候</p>
<p>知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="external">Functions/arguments</a></li>
</ul>
<p>首先 <code>The arguments object is an Array-like object corresponding to the arguments passed to a function.</code></p>
<p>也就是说 <code>arguments</code> 是一个 <code>object</code>, c 就是 arguments[2], 所以对于 c 的修改就是对 arguments[2] 的修改.</p>
<p>所以答案是 <code>21</code>.</p>
<p>然而!!!!!!</p>
<p>当函数参数涉及到 <code>any rest parameters, any default parameters or any destructured parameters</code> 的时候, 这个 arguments 就不在是一个 <code>mapped arguments object</code> 了…..</p>
<p>请看:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sidEffecting</span>(<span class="params">ary</span>) </span>&#123;</div><div class="line">  ary[<span class="number">0</span>] = ary[<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a,b,c=<span class="number">3</span></span>) </span>&#123;</div><div class="line">  c = <span class="number">10</span></div><div class="line">  sidEffecting(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line">bar(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>答案是 <code>12</code> !!!!</p>
<p>请读者细细体会!!</p>
<h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var a = <span class="number">111111111111111110000</span>,</div><div class="line">    b = <span class="number">1111</span>;</div><div class="line">a + b;</div></pre></td></tr></table></figure>
<p>答案还是 <code>111111111111111110000</code>. 解释是 <code>Lack of precision for numbers in JavaScript affects both small and big numbers.</code> 但是笔者不是很明白……………. 请读者赐教!</p>
<h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var x = [].reverse<span class="comment">;</span></div><div class="line">x()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这个题有意思!</p>
<p>知识点:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="external">Array/reverse</a></li>
</ul>
<p><code>The reverse method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.</code></p>
<p>也就是说 最后会返回这个调用者(this), 可是 x 执行的时候是上下文是全局. 那么最后返回的是 <code>window</code>.</p>
<p>答案是 <code>window</code></p>
<h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Number<span class="selector-class">.MIN_VALUE</span> &gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<p><code>true</code></p>
<p>今天先到这里, 下次我们来看后22个题!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题来自: &lt;a href=&quot;http://javascript-puzzlers.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javascript-puzzlers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读者可以先去做一下感受感受. 当初
    
    </summary>
    
    
      <category term="Javascript" scheme="http://xiaoyu2er.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 监听文件删除事件</title>
    <link href="http://xiaoyu2er.github.io/2016/03/31/gulp-watch-delete-files/"/>
    <id>http://xiaoyu2er.github.io/2016/03/31/gulp-watch-delete-files/</id>
    <published>2016-03-30T16:00:00.000Z</published>
    <updated>2016-04-01T07:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp是前端自动化的一个非常有用的工具, 如何使用Gulp甚至可以单开一个系列(一定会的!).</p>
<p>在使用Gulp的过程中, 有一个非常讨厌的问题, 就是监听文件删除事件.</p>
<p>设想这样一个场景, 我们在<code>src/</code>写ES6, 通过<code>gulp-babel</code>转化为ES5文件, 输出到<code>build/</code>下, 同时, 使用<code>gulp-inject</code>将<code>build/</code>下的js文件通过<code>script</code>标签的方式添加到<code>index.html</code>中;</p>
<p>增改文件都是极好的, 但是如果删除了<code>src/</code>下的某个文件, <code>build/</code> 下的文件并不会自动删除, 所以<code>index.html</code>还是会引用.</p>
<p>怎么解决呢? Show Me the CODE!</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="javascript">gulp.task(<span class="string">'watch'</span>, [<span class="string">'clean'</span>, <span class="string">'build'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line">    gulp.watch(<span class="string">'src/index.html'</span>, [<span class="string">'inject'</span>]);</div><div class="line">    <span class="keyword">var</span> watcher = gulp.watch([<span class="string">'src/**/*'</span>, <span class="string">'!src/index.html'</span>], [<span class="string">'babel'</span>, <span class="string">'inject'</span>]);</div><div class="line"></div><div class="line"></div><div class="line">    watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.type === <span class="string">'deleted'</span>) &#123;</div><div class="line">            <span class="keyword">var</span> src = path.relative(path.resolve(<span class="string">'src'</span>), event.path);</div><div class="line">            src = src.replace(<span class="regexp">/.es6$/</span>, <span class="string">'.js'</span>);</div><div class="line">            <span class="keyword">var</span> dest = path.resolve(buildDir, src);</div><div class="line">            del.sync(dest);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最关键的还是这个 <code>var watcher = gulp.watch()</code> 啦, <code>watcher</code>这个句柄就可以监听文件变动的事件了, 其中, <code>event</code> 就有<code>type</code>的属性, 用于表示是新增文件, 还是修改文件, 亦或是删除文件, 然后<code>path</code>属性表示当前变动的文件地址, 知道了这些信息, 就可以干任何事情啦!</p>
<ul>
<li><p><a href="http://stackoverflow.com/questions/22391527/gulps-gulp-watch-not-triggered-for-new-or-deleted-files" target="_blank" rel="external">Gulps gulp.watch not triggered for new or deleted files?</a></p>
</li>
<li><p><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/handling-the-delete-event-on-watch.md" target="_blank" rel="external">Handling the Delete Event on Watch</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gulp是前端自动化的一个非常有用的工具, 如何使用Gulp甚至可以单开一个系列(一定会的!).&lt;/p&gt;
&lt;p&gt;在使用Gulp的过程中, 有一个非常讨厌的问题, 就是监听文件删除事件.&lt;/p&gt;
&lt;p&gt;设想这样一个场景, 我们在&lt;code&gt;src/&lt;/code&gt;写ES6, 通
    
    </summary>
    
    
      <category term="Gulp" scheme="http://xiaoyu2er.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>webpack 资料整理 (持续更新)</title>
    <link href="http://xiaoyu2er.github.io/2016/03/21/awesome-webpack/"/>
    <id>http://xiaoyu2er.github.io/2016/03/21/awesome-webpack/</id>
    <published>2016-03-20T16:00:00.000Z</published>
    <updated>2016-03-21T02:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="http://pan.baidu.com/s/1nug9U9j" target="_blank" rel="external">Webpack Fundamentals(视频系列教程)</a></li>
<li><a href="http://gold.xitu.io/entry/5630280260b27cc2b9e85406" target="_blank" rel="external">如何使用 Webpack - webpack-howto (翻译)(Instagram)</a></li>
<li><a href="https://www.youtube.com/watch?v=VkTCL6Nqm6Y&amp;feature=youtu.be" target="_blank" rel="external">配套视频, Instagram团队Peter-Hunt的分享</a></li>
<li><a href="https://www.youtube.com/watch?v=MzVFrIAwwS8" target="_blank" rel="external">视频: Advanced Webpack (Lonely Planet的前端) 很多实用的技巧</a></li>
<li><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></li>
<li><a href="http://code.oneapm.com/javascript/2015/07/07/webpack_performance_1/" target="_blank" rel="external">Webpack 性能优化 （一）(使用别名做重定向)</a></li>
<li><a href="https://github.com/chemdemo/chemdemo.github.io/issues/10" target="_blank" rel="external">基于webpack搭建前端工程解决方案探索 (评论更精彩)</a></li>
<li><a href="https://github.com/chemdemo/webpack-seed" target="_blank" rel="external">webpack-seed (一个基于webpack搭建的工程例子 很有借鉴意义 可以做到同时支持SPA和多页面型的项目) </a></li>
<li><a href="https://segmentfault.com/a/1190000003499526" target="_blank" rel="external">基于webpack搭建前端工程解决方案探索</a></li>
<li><a href="https://segmentfault.com/a/1190000004577578" target="_blank" rel="external">【前端构建】WebPack实例与前端性能优化</a></li>
<li><a href="https://segmentfault.com/a/1190000003969465" target="_blank" rel="external">gulp + webpack 构建多页面前端项目</a></li>
</ul>
<p>请关注 <a href="https://github.com/xiaoyu2er/awesome-webpack" target="_blank" rel="external">xiaoyu2er/awesome-webpack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pan.baidu.com/s/1nug9U9j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack Fundamentals(视频系列教程)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://
    
    </summary>
    
    
      <category term="Webpack" scheme="http://xiaoyu2er.github.io/tags/Webpack/"/>
    
      <category term="前端工程化" scheme="http://xiaoyu2er.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Google 镜像站搜集(2016年7月23日更新)</title>
    <link href="http://xiaoyu2er.github.io/2016/03/16/google-mirror/"/>
    <id>http://xiaoyu2er.github.io/2016/03/16/google-mirror/</id>
    <published>2016-03-15T16:00:00.000Z</published>
    <updated>2016-07-23T02:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>自由的接触信息应该是每个人不可剥夺的基本人权.</p>
<p>持续更新! 敬请关注! <a href="https://github.com/xiaoyu2er/google-mirror-check" target="_blank" rel="external">google-mirror-check npm包已发布</a></p>
<p>如果您是以下镜像的作者, 且不希望出现在以下列表中，可以联系<a href="mailto:zongyanqi@foxmail.com" target="_blank" rel="external">我</a>移除链接。</p>
<ul>
<li><a href="http://gc.ihuan.me/" target="_blank" rel="external">http://gc.ihuan.me/</a> (1440ms)</li>
<li><a href="http://soguge.com/" target="_blank" rel="external">http://soguge.com/</a> (1476ms)</li>
<li><a href="http://s.8090st.com/" target="_blank" rel="external">http://s.8090st.com/</a> (1816ms)</li>
<li><a href="https://g.jikewenku.cn/" target="_blank" rel="external">https://g.jikewenku.cn/</a> (2338ms)</li>
<li><a href="http://www.bjgong.tk/" target="_blank" rel="external">http://www.bjgong.tk/</a> (2964ms)</li>
<li><a href="https://g.alexyang.me/" target="_blank" rel="external">https://g.alexyang.me/</a> (3293ms)</li>
<li><a href="https://g.libnull.com/" target="_blank" rel="external">https://g.libnull.com/</a> (3681ms)</li>
<li><a href="https://g.zrj766.com/" target="_blank" rel="external">https://g.zrj766.com/</a> (3861ms)</li>
<li><a href="https://ggss.cf/" target="_blank" rel="external">https://ggss.cf/</a> (4127ms)</li>
<li><a href="https://ggso.in/" target="_blank" rel="external">https://ggso.in/</a> (4500ms)</li>
<li><a href="https://www.onenew.net/" target="_blank" rel="external">https://www.onenew.net/</a> (4861ms)</li>
<li><a href="http://hao.cytbj.com/" target="_blank" rel="external">http://hao.cytbj.com/</a> (5395ms)</li>
<li><a href="http://www.zzq2.com/" target="_blank" rel="external">http://www.zzq2.com/</a> (5428ms)</li>
<li><a href="http://ggss.cf/" target="_blank" rel="external">http://ggss.cf/</a> (5947ms)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自由的接触信息应该是每个人不可剥夺的基本人权.&lt;/p&gt;
&lt;p&gt;持续更新! 敬请关注! &lt;a href=&quot;https://github.com/xiaoyu2er/google-mirror-check&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;goog
    
    </summary>
    
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
      <category term="Google" scheme="http://xiaoyu2er.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>设置 Mac 下文件的默认打开程序 — duti 详解</title>
    <link href="http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/"/>
    <id>http://xiaoyu2er.github.io/2016/01/31/mac-default-app-for-spec-file-type/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-03-13T09:16:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 <code>.c</code>, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.<br>再比如我想打开一个 <code>.md</code> 文件, 这货居然没有默认打开方式, 这个时候我们可能会右击然后找到那个打开方式, 设置成为 sublime 或者 mou.</p>
<p><img src="/img/duti/get-info.png" alt="Get Info"></p>
<p>但是碰到一个 <code>.markdown</code>的文件, 系统又蒙圈了, 还是不知道用什么打开, 当然我们也可以按照刚才说的去修改.</p>
<p>那么有没有一个快捷的方式, 可以批量的修改系统中所有文件的默认打开方式呢? 有! 就是我们今天要介绍的 <code>duti</code></p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>duti是 Mac 下的一个命令行工具, 主要作用为不同文件类型设置默认的应用. <strong>duti</strong> 的意思其实就是 <strong>default for UTI</strong></p>
<p>在介绍如何使用之前我们需要明确几个概念:</p>
<h3 id="UTI"><a href="#UTI" class="headerlink" title="UTI"></a>UTI</h3><p>Mac 下的文件类型被定义为 Uniform Type Identifiers (UTI). 例如, HTML 文件的 UTI 是 <strong>public.html</strong>; Word 文档的 UTI 是 <strong>com.microsoft.word.doc</strong>.<br>那么改变文件类型的默认打开方式的第一步就是确认文件类型啦.</p>
<p>第一个方式是去看苹果列出来的 UTI <a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html" target="_blank" rel="external">Uniform Type Identifiers Reference</a></p>
<p>第二个方式是使用 <code>mdls</code> 命令, 这哥们的作用就是: lists the metadata attributes for the specified file<br>那么如何使用呢, 很简单只要把你想要获得 UTI 的文件作为参数就好了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mdls test.txt</div><div class="line"></div><div class="line">kMDItemContentType             = <span class="string">"public.plain-text"</span></div><div class="line">kMDItemContentTypeTree         = (</div><div class="line">    <span class="string">"public.plain-text"</span>,</div><div class="line">    <span class="string">"public.text"</span>,</div><div class="line">    <span class="string">"public.data"</span>,</div><div class="line">    <span class="string">"public.item"</span>,</div><div class="line">    <span class="string">"public.content"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>我们可以看到其中就有这样的输出(截取). 可以看到一个 <code>.txt</code> 文件的 UTI 就是 <code>public.plain-text</code>, 那么下面这一坨是干什么的呢?<br>因为文件类型也有一个具体和宽泛的划分嘛, 越往下约 general.<br>再来看一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mdls test.css</div><div class="line"></div><div class="line">kMDItemContentType             = <span class="string">"public.css"</span></div><div class="line">kMDItemContentTypeTree         = (</div><div class="line">    <span class="string">"public.css"</span>,</div><div class="line">    <span class="string">"public.text"</span>,</div><div class="line">    <span class="string">"public.data"</span>,</div><div class="line">    <span class="string">"public.item"</span>,</div><div class="line">    <span class="string">"public.content"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p><code>public.css</code> 就是 <code>.css</code> 的 UTI.</p>
<h3 id="Bundle-ID"><a href="#Bundle-ID" class="headerlink" title="Bundle ID"></a>Bundle ID</h3><p>Bundle ID (应用标识符)) 是 iOS 或者 Mac 应用的唯一标识. 也就是我们希望用什么软件打开我们的文件的那个软件的 ID 啦.</p>
<p>可以用以下命令获得 Bundle ID:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ osascript <span class="_">-e</span> <span class="string">'id of app "Finder"'</span></div><div class="line">com.apple.finder</div><div class="line"></div><div class="line">$ osascript <span class="_">-e</span> <span class="string">'id of app "Atom"'</span></div><div class="line">com.github.atom</div><div class="line"></div><div class="line">$ osascript <span class="_">-e</span> <span class="string">'id of app "Sublime Text 2"'</span></div><div class="line">com.sublimetext.2</div></pre></td></tr></table></figure>
<h3 id="Bundle-Id-amp-UTI"><a href="#Bundle-Id-amp-UTI" class="headerlink" title="Bundle Id &amp; UTI"></a>Bundle Id &amp; UTI</h3><p>那么知道了文件的类型UTI, 知道了软件的 Bundle ID, 距离设定文件的默认程序其实就差一步了.<br>还有一个概念, 就是这个软件对于这个文件是个什么角色. 其实我们这里大部分情况只需要关心 <code>editor</code> 这个角色. 就是编辑角色. 其他的没啥用.</p>
<ul>
<li>all: application handles all roles for the given UTI.</li>
<li>viewer: application handles reading and displaying documents with the given UTI.</li>
<li>editor: application can manipulate and save the item. Implies viewer.</li>
<li>shell: application can execute the item.</li>
<li>none: application  cannot  open  the item, but provides an icon for the given UTI.</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>好了, 介绍了这么多概念, 终于到了修改文件默认打开方式的时候了!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duti [ -hVv ] [ settings_path ]</div></pre></td></tr></table></figure>
<p>如果上述语句没有给<code>settings_path</code>, duti 将会从标准输入读取配置. 如果<code>setting_path</code>是个文件夹的话, 那么 duti 将会从文件夹内的所有文件中读取配置.</p>
<p>那么这个 setting_path 文件的每一行其实需要三个字段:</p>
<ul>
<li>应用的标识符 Bundle ID (比如: com.apple.Safari)</li>
<li>文件类型的 UTI (比如: public.html), 扩展名或者 MIME 类型</li>
<li>应用对于 UTI 的角色是什么 (比如, editor 编辑器)</li>
</ul>
<h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><ul>
<li><strong>-s</strong>: 选项会让 duti 从命令行读参数.</li>
<li><strong>-x ext</strong>: 选项会让 duti 输出参数中扩展名对应的默认应用</li>
<li><strong>-d uti</strong>: 打印 UTI 的默认应用.</li>
<li><strong>-l uti</strong>: 打印 UTI 的所有可用应用.</li>
<li>-V: 打印版本.</li>
<li>-v: 详细输出.</li>
<li>-h: 帮助.</li>
</ul>
<h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><p>使用 -s 选项, 从命令行读取参数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">duti <span class="_">-s</span> com.apple.Safari public.html all</div><div class="line">duti <span class="_">-s</span> com.apple.Finder ftp</div></pre></td></tr></table></figure>
<p>但是我比较喜欢把这个设定放到一个文件里, 比如 <code>duti-sublime</code>,<br>我希望用 Sublime 打开 <code>.md</code>, <code>.css</code>, <code>.js</code>, 以及富文本文件, 纯文本文件, 以及一些 shell 脚本.<br>那么我的文件内容如下:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    net<span class="selector-class">.daringfireball</span><span class="selector-class">.markdown</span>  editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.css</span>	editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.script</span>	editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.source-code</span>  editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.rtf</span>  editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.plain-text</span>   editor</div><div class="line">com<span class="selector-class">.sublimetext</span>.<span class="number">2</span>    public<span class="selector-class">.unix-executable</span>   editor</div></pre></td></tr></table></figure>
<p>运行命令:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">duti duti-sublime</span></div></pre></td></tr></table></figure>
<p>然后我们在使用 -x 选项, 打印 UTI 的默认应用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ duti -x css</div><div class="line">Sublime Text 2.app</div><div class="line">/opt/homebrew-cask/Caskroom/sublime-text/2.0.2/Sublime Text 2.app</div><div class="line">com.sublimetext.2</div></pre></td></tr></table></figure>
<p>双击<code>test.css</code>就是Sublime打开啦~</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html</a></li>
<li><a href="http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x" target="_blank" rel="external">http://superuser.com/questions/209145/how-to-get-a-files-uti-from-the-command-line-in-mac-os-x</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 mac 中打开一个文件会有一个默认的应用. 但是这个应用往往不是我们希望的那个. 比如我想打开一个 &lt;code&gt;.c&lt;/code&gt;, Mac 会启动 XCode来打开这个文件, 这往往不是我希望的.&lt;br&gt;再比如我想打开一个 &lt;code&gt;.md&lt;/code&gt; 文件, 这
    
    </summary>
    
    
      <category term="Tools" scheme="http://xiaoyu2er.github.io/tags/Tools/"/>
    
      <category term="Mac" scheme="http://xiaoyu2er.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>SVG (一) 基础知识总结</title>
    <link href="http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/"/>
    <id>http://xiaoyu2er.github.io/2016/01/30/svg-1-basics/</id>
    <published>2016-01-29T16:00:00.000Z</published>
    <updated>2016-03-24T14:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<style>

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
</style>

<p>近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内容.<br>我看的是这本书 <a href="http://book.douban.com/subject/25941192/" target="_blank" rel="external">SVG Essentials, 2nd Edition</a>,以及它的中译版 <a href="http://book.douban.com/subject/26640057/" target="_blank" rel="external">SVG精髓（第2版）</a>.<br>这本书深入浅出, 例子很多, 非常不错. 因为 svg 涉及到很多关于颜色的内容, 所以还是建议大家看电子版.</p>
<a id="more"></a>
<p>工作中的任务是实现一个相框功能, 当中涉及到了诸如 use, image, clip-path 的内容, 学习了一段时间后总算解决了, 所以希望记录一下学习内容和解决方案.<br>内容比较多, 所以准备开一个系列, 这是 SVG 系列的第一篇, 基础知识总结. 后续将会有更多关于 SVG 的内容. 敬请期待!</p>
<h1 id="SVG-basics"><a href="#SVG-basics" class="headerlink" title="SVG basics"></a>SVG basics</h1><h2 id="Shape-Reference-Summary"><a href="#Shape-Reference-Summary" class="headerlink" title="Shape Reference Summary"></a>Shape Reference Summary</h2><table>
<thead>
<tr>
<th>形状</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;line x1=&quot;start-x&quot; y1=&quot;start-y&quot; x2=&quot;end-x&quot; y2=&quot;end-y&quot;/&gt;</code></td>
<td><strong>直线</strong>: 起点(start-x, start-y) 终点(end-x, end-y);</td>
</tr>
<tr>
<td><code>&lt;rect x=&quot;left-x&quot; y=&quot;top-y&quot; width=&quot;width&quot; height=&quot;height&quot; /&gt;</code></td>
<td><strong>矩形</strong>: 左上角(left-x, top-y), 宽高 width, height</td>
</tr>
<tr>
<td><code>&lt;circle cx=&quot;center-x&quot; cy=&quot;center-y&quot; r=&quot;radius&quot;/&gt;</code></td>
<td><strong>圆</strong>: 圆心(center-x, center-y) 半径 r</td>
</tr>
<tr>
<td><code>&lt;ellipse cx=&quot;center-x&quot; cy=&quot;center-y&quot; rx=&quot;x-radius&quot; ry=&quot;y-radius&quot;/&gt;</code></td>
<td><strong>椭圆</strong>: 圆心(center-x, center-y) xy轴半径 rx, ry</td>
</tr>
<tr>
<td><code>&lt;polygon points=&quot;points-list&quot;/&gt;</code></td>
<td><strong>多边形</strong>: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….</td>
</tr>
<tr>
<td><code>&lt;polyline points=&quot;points-list&quot;/&gt;</code></td>
<td><strong>折线</strong>: 由一系列坐标组成, points-list: x1 y1 x2 y2 x3 y3 ….</td>
</tr>
</tbody>
</table>
<h2 id="Path-Reference-Summary"><a href="#Path-Reference-Summary" class="headerlink" title="Path Reference Summary"></a>Path Reference Summary</h2><p>本质上, 上述基本形状都是路径(path)的简写. 简写可以使得 svg 文档更具有可读性. 但是当碰到复杂路径时, 就需要 path 来描述. 以下总结中, 凡是出现大写字母表示后续坐标为绝对坐标, 凡是小写字母都代表相对于上一个坐标的相对位移. Z 同 z 无差别. 因为表示闭合, 其后不用跟坐标</p>
<table>
<thead>
<tr>
<th>command</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>M(m) x y</code></td>
<td>移动到(x, y) (小写表示相对于上个坐标的位移, 下同)</td>
</tr>
<tr>
<td><code>L(l) x y</code></td>
<td>画一条直线到(x, y)</td>
</tr>
<tr>
<td><code>H(h) x</code></td>
<td>水平画一条直线到 x</td>
</tr>
<tr>
<td><code>V(v) y</code></td>
<td>竖直画一条直线到 y</td>
</tr>
<tr>
<td><code>A(a) rx ry x-axis-rotation large-arc sweep x y</code></td>
<td>画一段到(x,y)的椭圆弧. 椭圆弧的 x, y 轴半径分别为 rx,ry. 椭圆相对于 x 轴旋转 x-axis-rotation 度. large-arc=0表明弧线小于180读, large-arc=1表示弧线大于180度. sweep=0表明弧线逆时针旋转, sweep=1表明弧线顺时间旋转. 具体解释看<a href="#arc">如何绘制椭圆弧</a></td>
</tr>
<tr>
<td><code>Q(q) cx cy x y</code></td>
<td>从当前点画一条到(x, y)的二次<a href="http://www.wikiwand.com/zh-hans/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="external">贝塞尔曲线</a>, 曲线的控制点为(cx, cy). 关于二次贝塞尔曲线请看<a href="#quadratic-bezier">二次贝塞尔曲线详解</a></td>
</tr>
<tr>
<td><code>T(t) x y</code></td>
<td>此命令只能跟在一个 Q 命令使用, 假设 Q 命令生成曲线 s,  T 命令的作用是从 s 的终点再画一条到(x y)的二次贝塞尔曲线, 曲线的控制点为 s 控制点关于 s 终点的对称点. T 命令生成的曲线会非常平滑</td>
</tr>
<tr>
<td><code>C(c) cx1 cy1 cx2 cy2 x y</code></td>
<td>从当前点画一条到(x, y)的三次贝塞尔曲线, 曲线的开始控制点和终点控制点为别为 (cx1, cy1), (cx2, cy2). 关于三次贝塞尔曲线请看<a href="#cubic-bezier">三次贝塞尔曲线详解</a></td>
</tr>
<tr>
<td><code>S(s) cx2 cy2 x y</code></td>
<td>此命令只能跟在 C 命令后使用, 假设 C 命令生成曲线 s, S 命令的作用是再画一条到 (x, y)的三次贝塞尔曲线, 曲线的终点控制点是 (cx2, cy2), 曲线的开始控制点是 s 的终点控制点关于 s 终点的对称点.</td>
</tr>
</tbody>
</table>
<h2 id="Transformation-Reference-Summary"><a href="#Transformation-Reference-Summary" class="headerlink" title="Transformation Reference Summary"></a>Transformation Reference Summary</h2><table>
<thead>
<tr>
<th>transform</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>translate(x, y)</code></td>
<td><strong>平移</strong>: 将用户坐标系统的坐标原点移动到(x, y)</td>
</tr>
<tr>
<td><code>scale(xFactor, yFactor)</code></td>
<td><strong>缩放</strong>: 将用户坐标系统的xy轴单位长度分别乘(xFactor, yFactor)倍</td>
</tr>
<tr>
<td><code>scale(factor)</code></td>
<td><strong>缩放</strong>: 同 <code>scale(factor, factor)</code></td>
</tr>
<tr>
<td><code>rotate(angle, centerX, centerY)</code></td>
<td><strong>旋转</strong>: 将用户坐标系统以(centerX, centerY)为旋转中心顺时针旋转 angle 度</td>
</tr>
<tr>
<td><code>rotate(angle)</code></td>
<td><strong>旋转</strong>: 同 <code>rotate(angle, 0, 0)</code></td>
</tr>
<tr>
<td><code>skewX(angle)</code></td>
<td><strong>倾斜</strong>: 根据 angle 倾斜所有 x 轴坐标, 视觉上会看到 y 轴倾斜…</td>
</tr>
<tr>
<td><code>skewY(angle)</code></td>
<td><strong>倾斜</strong>: 根据 angle 倾斜所有 y 轴坐标, 视觉上会看到 x 轴倾斜…</td>
</tr>
<tr>
<td><code>matrix(a b c d e f)</code></td>
<td><strong>矩阵变换</strong>: 将坐标系统进行矩阵变换, 详细内容请参考后续文章</td>
</tr>
</tbody>
</table>
<h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><h2 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h2><p>一种直观的表示椭圆弧线的方式是, 根据椭圆中心 (x, y), x 轴半径 rx, y 轴半径 ry, 开始角度 startAngle, 结束角度 endAngle.<br>但是为什么 SVG 会采用 <code>A(a) rx ry x-axis-rotation large-arc sweep x y</code> 这样的形式呢,<br>主要是因为在 SVG 中, 弧线并不是孤立的存在, 他要成为整体的一部分. 所以 SVG 采用了起始点这样的方式.<br>那么其他的 x-axis-rotation, large-arc, sweep 又是什么意思呢? 我们现在来看下面这张图.</p>
<p><img src="/img/svg/arcs02.svg" alt="ellipse"></p>
<p>当确定了两个点已经椭圆的 rx, ry 后并不能唯一确定一条椭圆弧, 实际上根据是否是大圆, 路径是否是逆时针可以产生四条 (b, c, d, e)<br>其中, large-arc-flag=0 表示小圆, sweep-flag=0 表示逆时针.</p>
<p>那么 x-axis-rotation 又是什么意思呢? b, c, d, e 产生的前提是 椭圆的 x 轴与用户坐标系的 x 轴是平行的.<br>f 图表示椭圆 x 轴相对于用户坐标系的 x 轴旋转30度所产生的椭圆弧. 灰色的部分表示原来产生的椭圆弧.</p>
<h2 id="Quadratic-Bezier"><a href="#Quadratic-Bezier" class="headerlink" title="Quadratic Bezier"></a>Quadratic Bezier</h2><p>关于贝塞尔曲线的数学含义请看<a href="http://www.wikiwand.com/en/B%C3%A9zier_curve" target="_blank" rel="external">Bézier curve</a><br>这里直观的讲一下</p>
<p><img src="/img/svg/quad01.svg" alt="quadratic bezier 01"></p>
<p>以上曲线的路径表示是: <code>&lt;path d=&quot;M200,300 Q400,50 600,300 T1000,300&quot;/&gt;</code><br>我们可以看出:<br>A 是起点, B 是终点, C 就是控制点.<br>找出 AC 的重点 D, BC 的重点 E, 连接 DE, 找出其中点 F, F 即这条曲线前半段的一个切点.</p>
<p>这里不谈数学含义, 这样的几何意义更加直观.</p>
<p>再来看 T 命令, 其实 T 命令是 Q 的一个简写.<br>其控制点 H 就是上个 Q 命令的控制点 C 关于终点 B 的对称点.<br>使用 T 命令产生的曲线往往比较顺滑 :)</p>
<h2 id="Cubic-Bezier"><a href="#Cubic-Bezier" class="headerlink" title="Cubic Bezier"></a>Cubic Bezier</h2><p>再来看一下三次贝塞尔曲线</p>
<p><img src="/img/svg/cubic01.svg" alt="cubic bezier 01"></p>
<p><code>&lt;path d=&quot;M100,200 C100,100 250,100 250,200 S400,300 400,200&quot;/&gt;</code></p>
<p>前半段曲线(C 命令) s1:<br>起点 A, 终点 B, 起点控制点 C, 终点控制点 D, 连接 AC, BD, CD;<br>找到 CD 中点 F, 连接 AC 中点 E 与 F, 连接 BD 中点 G 与 F;<br>连接 EF, FG, 连接 EF 中点 H 与 FG 中点 I;<br>I 即为前半段曲线的切点;</p>
<p>后半段曲线(S 命令) s2:<br>S 只能跟在 C 命令后使用;<br>s2 的起点 B, 终点 L, 终点控制点 K;<br>s2 的起点控制点是 s1 的终点控制点 D 关于 s1终点 B 的对称点</p>
<p>下图是更多关于三次贝塞尔曲线的例子:</p>
<p><img src="/img/svg/cubic02.svg" alt="cubic bezier 01"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://book.douban.com/subject/25941192/" target="_blank" rel="external">SVG Essentials, 2nd Edition</a></li>
<li><a href="http://book.douban.com/subject/26640057/" target="_blank" rel="external">SVG精髓（第2版）</a></li>
<li><a href="https://www.w3.org/TR/SVG/paths.html" target="_blank" rel="external">以上图片均改编自W3C SVG规范</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="external">MDN SVG Tutorial - Path</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;style&gt;

   table:nth-of-type(2) td:nth-of-type(1) { width:30%; }
    img { width: 80%; }
&lt;/style&gt;

&lt;p&gt;近期工作中要处理很多 SVG 图片, 所以从零开始学习了 SVG 的相关内容.&lt;br&gt;我看的是这本书 &lt;a href=&quot;http://book.douban.com/subject/25941192/&quot;&gt;SVG Essentials, 2nd Edition&lt;/a&gt;,以及它的中译版 &lt;a href=&quot;http://book.douban.com/subject/26640057/&quot;&gt;SVG精髓（第2版）&lt;/a&gt;.&lt;br&gt;这本书深入浅出, 例子很多, 非常不错. 因为 svg 涉及到很多关于颜色的内容, 所以还是建议大家看电子版.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SVG" scheme="http://xiaoyu2er.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Angular Scope 的继承关系</title>
    <link href="http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/"/>
    <id>http://xiaoyu2er.github.io/2016/01/23/angular-scope-in-depth/</id>
    <published>2016-01-22T16:00:00.000Z</published>
    <updated>2016-03-13T09:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Prototypal-Inheritance"><a href="#JavaScript-Prototypal-Inheritance" class="headerlink" title="JavaScript Prototypal Inheritance"></a>JavaScript Prototypal Inheritance</h1><p>首先我们先来回顾以下 javascript 中出现的原型继承:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ParentScope</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.aString = <span class="string">"parent string"</span>;</div><div class="line">    <span class="keyword">this</span>.aNumber = <span class="number">100</span>;</div><div class="line">    <span class="keyword">this</span>.anArray = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</div><div class="line">    <span class="keyword">this</span>.anObject = &#123;</div><div class="line">    <span class="string">'property1'</span>: <span class="string">'parent prop1'</span>,</div><div class="line">    <span class="string">'property2'</span>: <span class="string">'parent prop2'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.aFunction = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'parent output'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChildScope</span><span class="params">()</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ChildScope.prototype = <span class="keyword">new</span> ParentScope();</div><div class="line"></div><div class="line"><span class="keyword">var</span> childScope = <span class="keyword">new</span> ChildScope();</div></pre></td></tr></table></figure>
<p>ChildScope 原型继承自 ParentScope</p>
<p><img src="/img/angular-scope/B2FE24340A82C7B6FF9BF1CBDA5BA818.png" alt="normal prototypal inheritance"></p>
<p>如果我们要在 childScope 上查询一个定义在 parentScope 的属性, JavaScript 会先在 childScope 上查找, 如果没有查到, 那么会顺着原型链去查找. 所以以下判别式均为 <code>true</code></p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">childScope.aString === <span class="symbol">'parent</span> string'</div><div class="line">childScope.anArray[<span class="number">1</span>] === <span class="number">20</span></div><div class="line">childScope.anObject.property1 === <span class="symbol">'parent</span> prop1'</div><div class="line">childScope.aFunction<span class="literal">()</span> === <span class="symbol">'parent</span> output'</div></pre></td></tr></table></figure>
<p>如果我们做如下操作:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">childScope<span class="selector-class">.aString</span> = <span class="string">'child string'</span></div></pre></td></tr></table></figure>
<p>原型链并没有被访问, 一个新的 <code>aString</code> 会被加入到 childScope 的属性中去, 新的属性会隐藏 parentScope 中的同名属性.</p>
<p><img src="/img/angular-scope/220573C69F0581E93828B5670F52C415.png" alt="shadowing"></p>
<p>假设我们做出如下操作:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">childScope<span class="selector-class">.anArray</span>[<span class="number">1</span>] = <span class="number">22</span></div><div class="line">childScope<span class="selector-class">.anObject</span><span class="selector-class">.property1</span> = <span class="string">'child prop1'</span></div></pre></td></tr></table></figure>
<p>原型链被访问了. 因为 <code>anArray</code>, <code>anObject</code> 没有在 childScope 中找到.<br>新的赋值操作均在 parentScope 上进行. childScope 上没有添加任何新的属性.</p>
<p><img src="/img/angular-scope/6AB968DED1A16F35C0B07ABE855F1DE1.png" alt="follow the chain"></p>
<p>如果我们做出如下操作</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">childScope<span class="selector-class">.anArray</span> = [<span class="number">100</span>, <span class="number">555</span>]</div><div class="line">childScope<span class="selector-class">.anObject</span> = &#123; name: <span class="string">'Mark'</span>, country: <span class="string">'USA'</span> &#125;</div></pre></td></tr></table></figure>
<p>原型链没有被访问, childScope 会获得两个新的属性, 并且会隐藏 parentScope 上的同名属性.</p>
<p><img src="/img/angular-scope/E2B99E360766E387E06F30DE655F6883.png" alt="not following the chain"></p>
<p>仔细体会上面的三次操作. 第一第三次均是对某个属性进行赋值, 原型链并不会被访问, 由于属性并不存在, 所以新的属性将会被添加. 而第二次其实是先访问, <code>childScope.anArray</code>, <code>childScope.anObject</code>, 再对其访问的对象的某个属性进行复制.</p>
<p>总结:</p>
<ul>
<li>如果我们读取 childScope.propertyX, 而 childScope 拥有 propertyX, 那么原型链不会被访问</li>
<li>如果我们读取 childScope.propertyX, 而 childScope 并没有 propertyX, 那么原型链会被访问.</li>
<li>如果对 childScope.propertyX 进行赋值, 那么原型链并不会被访问.</li>
</ul>
<p>最后我们再来看一种情况:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delete childScope.anArray</div><div class="line">childScope.anArray[<span class="number">1</span>] === <span class="number">22</span>  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>我们显示删除了 childScope 的一个属性, 接着试图读取这个属性, 由于 childScope 并没有了这个属性, 所以原型链会被访问.</p>
<p><img src="/img/angular-scope/BD6A16127625E60B805FC02B117C754C.png" alt="after deleting a property"></p>
<h1 id="Angular-Scope-Inheritance"><a href="#Angular-Scope-Inheritance" class="headerlink" title="Angular Scope Inheritance"></a>Angular Scope Inheritance</h1><p>接着我们来看看 Angular 中的 scope 继承</p>
<p>以下指令会创建新的 scope, 并且会在原型上继承 父scope (即$scope.$parent, 下文两个词互为同义词):</p>
<ul>
<li>ng-repeat</li>
<li>ng-switch</li>
<li>ng-view</li>
<li>ng-controller</li>
<li>带有 <code>scope: true</code> 的指令</li>
<li>带有 <code>transclude: true</code> 的指令</li>
</ul>
<p>以下指令创建新的指令, 且在原型上 <strong>不继承</strong> 父scope:</p>
<ul>
<li>带有 <code>scope: { ... }</code> 的指令, 这会创建一个 独立的scope (isolate scope)</li>
</ul>
<p><strong>注意</strong>: 默认指令并不会创建 scope, 默认是 <code>scope: false</code>, 通常称之为 共享scope.</p>
<p>让我们来看几个例子:</p>
<h2 id="ng-include"><a href="#ng-include" class="headerlink" title="ng-include"></a>ng-include</h2><p>JS:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$scope</span>.myPrimitive = 50;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$scope</span>.myObject    = &#123;aNumber: 11&#125;;</span></div></pre></td></tr></table></figure>
<p>HTML:</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123; myPrimitive &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="template-variable">&#123; myObject.aNumber &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> // cannot use double curly brackets in jekyll</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/tpl1.html"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">ng-model</span>=<span class="string">"myPrimitive"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span> <span class="attr">src</span>=<span class="string">"'/tpl1.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/tpl2.html"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">ng-model</span>=<span class="string">"myObject.aNumber"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span> <span class="attr">src</span>=<span class="string">"'/tpl2.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>每一个 ng-include 都会创建一个 子scope, 并在原型上继承 父 scope</p>
<p><img src="/img/angular-scope/4FF01866A53AFF5A86061140DB783455.png" alt="ng-include"></p>
<p>向第一个 input 输入数字, 一个新的属性 <code>myPrimitive</code> 将会被创建, 同时隐藏 父 scope 的 <code>myPrimitive</code>;</p>
<p><img src="/img/angular-scope/3EDC9636029502E51C1E5C3F3CFF281A.png" alt="ng-include primitive"></p>
<p>向第二个 input 输入数字, 子 scope 并不会创建一个新的属性, 这时候原型继承发挥了作用.</p>
<p><img src="/img/angular-scope/DF9CE2689AC84645D641B8EE1EA8EDF4.png" alt="ng-include object"></p>
<p>第一种情况很可能不是我们期待的结果, 所以可以显式的调用 <code>$parent</code> 来解决这个问题.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">input</span> ng-model=<span class="string">"$parent.myPrimitive"</span>&gt;</div></pre></td></tr></table></figure>
<p>向第一个 input 键入数字, 这时候就不会产生新的属性了. $parent 指向了 父scope. 但是 $parent 和 原型上的继承并不一定相等. 稍后我们会看到一个例子.</p>
<p><img src="/img/angular-scope/7083CECC79990759E33B8992C5A886CA.png" alt="ng-include $parent"></p>
<p>对于所有的 scope, 无论是共享的(<code>scope: false</code>), 继承的(<code>scope: true</code>), 还是孤立的(<code>scope: { ... }</code>), Angular 都会建立一个 父-子 的层级关系, 这个层级关系是根据 dom 结构的层级关系决定的, 可以通过 <code>$parent</code>, <code>$$childHead</code>, <code>$$childTail</code> 来访问.</p>
<p>为了避免刚才的例子出现的子 scope 创建新属性情况的发声, 除了使用 <code>$scope</code>, 还可以使用调用原型链上的方法.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in the parent scope</span></div><div class="line">$scope.setMyPrimitive = <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</div><div class="line">    $scope.myPrimitive = value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ng-switch-ng-view"><a href="#ng-switch-ng-view" class="headerlink" title="ng-switch ng-view"></a>ng-switch ng-view</h2><p>ng-switch, ng-view 与 ng-include 情况类似, 不赘述.</p>
<h2 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h2><p>ng-repeat 有一点特殊.</p>
<p>JS:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$scope</span>.myArrayOfPrimitives = [ 11, 22 ];</span></div><div class="line"><span class="meta"><span class="meta-keyword">$scope</span>.myArrayOfObjects    = [&#123;num: 101&#125;, &#123;num: 202&#125;]</span></div></pre></td></tr></table></figure>
<p>HTML:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"num in myArrayOfPrimitives"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"obj in myArrayOfObjects"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"obj.num"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对于每一次迭代, ng-repeat 都会创建一个 子scope, 并在原型上继承 父scope, <strong>但是他还会将 父scope 上的属性赋值到 子scope 上</strong>. 新的属性名就是 <code>ng-repeat=&quot;** in parentScope.property&quot;</code> 中的 **.<br>源码中的 ng-repeat 是这样的:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">childScope = scope.$<span class="keyword">new</span>(); <span class="comment">// child scope prototypically inherits from parent scope ...</span></div><div class="line">childScope[valueIdent] = <span class="keyword">value</span>; <span class="comment">// creates a new childScope property</span></div></pre></td></tr></table></figure>
<p>如果 ** 是 primitive, 那么一份 copy 会被赋值到新的属性上. 修改 子scope 上的新属性自然不会修改 父 scope 上的属性.</p>
<p><img src="/img/angular-scope/5461BD4DFDF60DA34B9E91AE8DA8A6A6.png" alt="ng-repeat primitive"></p>
<p>如果 ** 是个 object, 那么一个 reference 会被赋值到新的 子scope 属性上. 修改这个属性, 就是修改 父scope 对应的属性.</p>
<p><img src="/img/angular-scope/091471A0D7D49CDDF1632FF25096118B.png" alt="ng-repeat object"></p>
<h2 id="ng-controller"><a href="#ng-controller" class="headerlink" title="ng-controller"></a>ng-controller</h2><p>ng-controller 也是会创建新的 子scope, 同时原型继承 父scope. 如同 ng-include, ng-switch, ng-view.<br>但是, 使用 $scope 来共享数据被认为是一种不好的操作. 因为原型链可是会一直向上追溯的.<br>如果想要共享数据, 最好使用 service.</p>
<h1 id="Angular-Directives"><a href="#Angular-Directives" class="headerlink" title="Angular Directives"></a>Angular Directives</h1><p>我们来总结以下指令中的 scope:</p>
<ol>
<li><code>scope: false</code>(默认的), 指令不会创建新的 scope, 没有继承关系. 与 $parent 共享 $scope.</li>
<li><code>scope: true</code>, 指令会创建一个 子scope, 并在原型上继承 $parent. 如果在一个 DOM 上有多个指令想要创建新的 scope, 会报错.</li>
<li><code>scope: { ... }</code>, 指令会创建一个 孤立的scope. 这在创建可重用的组件时是最好的选择. 但是, 即使如此, 指令还是希望读取 $parent 的数据. 这个时候可以使用如下符号获得:<ul>
<li><code>scope: { **: &quot;=&quot;}</code> 与 $parent 建立双向绑定.</li>
<li><code>scope: { **: &quot;@&quot;}</code> 与 $parent 建立单向绑定.</li>
<li><code>scope: { **: &quot;&amp;&quot;}</code> 绑定 $parent 的表达式.<br>想要获得相应的属性, 必须通过指令上的属性获得</li>
<li>HTML: <code>&lt;div my-directive the-Parent-Prop=parentProp&gt;</code></li>
<li>JS: <code>scope: { localProp: &#39;@theParentProp&#39; }</code><br>假设:</li>
</ul>
</li>
</ol>
<ul>
<li>HTML: <code>&lt;my-directive interpolated=&quot;&quot; twowayBinding=&quot;parentProp2&quot;&gt;</code></li>
<li>JS: <code>scope: { interpolatedProp: &#39;@interpolated&#39;, twowayBindingProp: &#39;=twowayBinding&#39; }</code></li>
<li>指令在 link 期间: <code>scope.someIsolateProp = &quot;I&#39;m isolated&quot;</code><br>其中的关系如图:<br><img src="/img/angular-scope/931892730C42AB06340A91FDFE61E2BA.png" alt="isolate scope"></li>
</ul>
<ol>
<li><code>transclude: true</code>, 指令创建了一个 “transcluded” 的子scope, 在原型上继承其 父scope. 如果上述例子同时具有<code>transclude: true</code>. 那么这个 “transcluded” scope, 和 “islolated” scope 是姊妹关系. 他们的 $parent 指向同一个 scope. 且 isolate scope 的 $$nextSibling 就是这个 “transcluded scope”. 下图反应了他们之间的关系:</li>
</ol>
<p><img src="/img/angular-scope/C6ADE4397FA38424C889CDB6C068B319.png" alt="transcluded scope"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes" target="_blank" rel="external">Angular Wiki: Understanding Scopes</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-Prototypal-Inheritance&quot;&gt;&lt;a href=&quot;#JavaScript-Prototypal-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Prototypal Inhe
    
    </summary>
    
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular $q 完全指南</title>
    <link href="http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/"/>
    <id>http://xiaoyu2er.github.io/2016/01/08/angular-q-complete-guide/</id>
    <published>2016-01-07T16:00:00.000Z</published>
    <updated>2016-03-24T14:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-q-完全指南"><a href="#Angular-q-完全指南" class="headerlink" title="Angular $q 完全指南"></a>Angular $q 完全指南</h1><p>如果想使用 $http 或者其他异步操作, 那 $q 是必须要掌握的概念啦. Let’s get started!</p>
<a id="more"></a>
<h2 id="如何理解-q-deferred-object"><a href="#如何理解-q-deferred-object" class="headerlink" title="如何理解$q, deferred object ?"></a>如何理解$q, deferred object ?</h2><p><a href="http://www.cnblogs.com/asnowwolf/p/3689300.html" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></p>
<blockquote>
<p>假设有一个家具厂，而它有一个VIP客户张先生。</p>
<p>有一天张先生需要一个豪华衣柜，于是，他打电话给家具厂说我需要一个衣柜，回头做好了给我送来，这个操作就叫$q.defer，也就是延期，因为这个衣柜不是现在要的，所以张先生这是在发起一个可延期的请求。</p>
<p>同时，家具厂给他留下了一个回执号，并对他说：我们做好了会给您送过去，放心吧。这叫做promise，也就是承诺。</p>
<p>这样，这个defer算是正式创建了，于是他把这件事记录在自己的日记上，并且同时记录了回执号，这叫做deferred，也就是已延期事件。</p>
<p>现在，张先生就不用再去想着这件事了，该做什么做什么，这就是“异步”的含义。</p>
<p>假设家具厂在一周后做完了这个衣柜，并如约送到了张先生家（包邮哦，亲），这就叫做deferred.resolve(衣柜)，也就是“已解决”。而这时候张先生只要签收一下这个（衣柜）参数就行了，当然，这个“邮包”中也不一定只有衣柜，还可以包含别的东西，比如厂家宣传资料、产品名录等。整个过程中轻松愉快，谁也没等谁，没有浪费任何时间。</p>
<p>假设家具厂在评估后发现这个规格的衣柜我们做不了，那么它就需要deferred.reject(理由)，也就是“拒绝”。拒绝没有时间限制，可以发生在给出承诺之后的任何时候，甚至可能发生在快做完的时候。而且拒绝时候的参数也不仅仅限于理由，还可以包含一个道歉信，违约金之类的，总之，你想给他什么就给他什么，如果你觉得不会惹恼客户，那么不给也没关系。</p>
<p>假设家具厂发现，自己正好有一个符合张先生要求的存货，它就可以用$q.when(现有衣柜)来把这个承诺给张先生，这件事就立即被解决了，皆大欢喜，张先生可不在乎你是从头做的还是现有的成品，只会惊叹于你们的效率之高。</p>
<p>假设这个家具厂对客户格外的细心，它还可能通过deferred.notify(进展情况)给张先生发送进展情况的“通知”。</p>
<p>这样，整个异步流程就圆满完成，无论成功或者失败，张先生都没有往里面投入任何额外的时间成本。</p>
<p>好，我们再扩展一下这个故事：</p>
<p>张先生这次需要做一个桌子，三把椅子，一张席梦思，但是他不希望今天收到个桌子，明天收到个椅子，后天又得签收一次席梦思，而是希望家具厂做好了之后一次性送过来，但是他下单的时候又是分别下单的，那么他就可以重新跟家具厂要一个包含上述三个承诺的新承诺，这就是$q.all(桌子承诺，椅子承诺，席梦思承诺)，</p>
<p>这样，他就不用再关注以前的三个承诺了，直接等待这个新的承诺完成，到时候只要一次性签收了前面的这些承诺就行了。</p>
</blockquote>
<h2 id="如何创建-promise-1"><a href="#如何创建-promise-1" class="headerlink" title="如何创建 promise -1"></a>如何创建 promise -1</h2><p>$q 支持两种写法, 第一种是类似于ES6标准构造函数写法 <code>$q(function resolver (resolve, reject) {})</code></p>
<p>注意:</p>
<pre><code>+ ES6 写法并不支持 progress/notify 的回调函数
+ 在构造函数中抛异常也并不会显式的reject the promise
</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var iWantResolve = false;</span></div><div class="line"><span class="keyword">var</span> iWantResolve = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">es6promise</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $q(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> </span>&#123;</div><div class="line">        $timeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (iWantResolve) &#123;</div><div class="line">                resolve(<span class="string">"es6promise resolved"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                reject(<span class="string">"es6promise reject"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="promise-的方法"><a href="#promise-的方法" class="headerlink" title="promise 的方法"></a>promise 的方法</h2><ul>
<li>promise.then(successCb, errCb, notifyCb)</li>
<li>其中successCb 将在 promise resolve 后被调用, errCb 将在 promise reject 后被调</li>
<li>notifyCb 将在 deferred.notify 后被调用, 可以多次调用</li>
<li>promise.catch == promise.then(null, errCb), 用于处理之前没有被处理的 rejected promise</li>
<li>promise.finally 将最后被调用, 一般用于资源释放的清理操作</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">es6promise()</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span></span> &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) <span class="built_in">output</span>: es6promise resolved</div><div class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) <span class="built_in">output</span>: es6promise reject</div></pre></td></tr></table></figure>
<h2 id="如何创建-promise-2"><a href="#如何创建-promise-2" class="headerlink" title="如何创建 promise -2"></a>如何创建 promise -2</h2><p>第二种是类似于 commonJS 的写法 $q.deferred()</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">commonJsPromise</span><span class="params">()</span></span> &#123;</div><div class="line">    var deferred = $q.defer();</div><div class="line">    $timeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</div><div class="line">        deferred.notify(<span class="string">"commonJS notify"</span>);</div><div class="line">        <span class="keyword">if</span> (iWantResolve) &#123;</div><div class="line">            deferred.resolve(<span class="string">"commonJS resolved"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            deferred.reject(<span class="string">"commonJS reject"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> deferred.promise;</div><div class="line">&#125;</div><div class="line"></div><div class="line">commonJsPromise()</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> /** <span class="title">success</span> <span class="title">callback</span>**/<span class="params">(data)</span></span> &#123;</div><div class="line">        console.log(data);</div><div class="line"></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> /** <span class="title">error</span> <span class="title">callback</span> **/ <span class="params">(err)</span></span> &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> /** <span class="title">progress</span> <span class="title">callback</span> **/ <span class="params">(update)</span></span> &#123;</div><div class="line">        console.log(update);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) <span class="built_in">output</span>: commonJS notify commonJS resolved</div><div class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) <span class="built_in">output</span>: commonJS notify commonJS reject</div></pre></td></tr></table></figure>
<h3 id="q-all"><a href="#q-all" class="headerlink" title="$q.all"></a>$q.all</h3><ul>
<li><code>$q.all([promise1, promise1])</code> 接受一个包含若干个 promise 的数组,</li>
<li>等所有的 promise resolve 后, 其本身 resolve 包含上述结果的数组 [data1, data2]</li>
<li>如果上述 promise 有一个 reject, 那么$q.all() 会把这个 rejected promise 作为其 rejected promise (只有一个哦)</li>
<li>progress/notify 的 callback 并没有用</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$q.all([es6promise(), commonJsPromise()])</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(dataArr)</span></span> &#123;</div><div class="line">        console.log(<span class="string">"$q.all: "</span>, dataArr);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span></span> &#123;</div><div class="line">        console.log(<span class="string">"$q.all: "</span>, err)</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> /** <span class="title">unnecessary</span> **/ <span class="params">(update)</span></span> &#123;</div><div class="line">        console.log(<span class="string">"$q.all"</span>, update);</div><div class="line">    &#125;);</div><div class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) <span class="built_in">output</span>: $q.all:  [<span class="string">"es6promise resolved"</span>, <span class="string">"commonJS resolved"</span>]</div><div class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) <span class="built_in">output</span>: $q.all:  es6promise reject</div></pre></td></tr></table></figure>
<h3 id="q-reject-q-when-q-resolve"><a href="#q-reject-q-when-q-resolve" class="headerlink" title="$q.reject, $q.when, $q.resolve"></a>$q.reject, $q.when, $q.resolve</h3><ul>
<li>$q.reject() 立即返回一个rejected 的 promise, 在链式调用的时候很有用</li>
<li>$q.resolve == $q.when(value, successCb, errorCb, progressCb)</li>
<li>value 可能是一个 then-able 的 obj(即可以是 $q.defer() 返回的, 也可以是其他库产生的), 也可能是任意数据,  但是 $q.when 最终都会返回一个 promise</li>
<li>$q.when 既可以写成上述的构造函数形式, 也可以写成 $q.when(value).then(fn, fn, fn) 的形式</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$q.reject(<span class="string">"instant reject"</span>)</div><div class="line">    .<span class="keyword">catch</span>(<span class="keyword">function</span> (err) &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;);</div><div class="line">// output: instant reject</div><div class="line"></div><div class="line">$q.<span class="keyword">when</span>(commonJsPromise(),</div><div class="line">    <span class="keyword">function</span> /** success callback **/(data) &#123;</div><div class="line">        console.log(<span class="string">"$q.when success callback function: "</span> + data);</div><div class="line">        return <span class="string">"$q.when success callback return another value"</span>;</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="keyword">function</span> (data) &#123;</div><div class="line">        console.log(<span class="string">"$q.when then function:"</span> + data);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">// <span class="keyword">if</span>(iWantResolve == <span class="literal">true</span>) output:</div><div class="line">// $q.<span class="keyword">when</span> success callback functionL: commonJS resolved</div><div class="line">// $q.<span class="keyword">when</span> <span class="keyword">then</span> function:$q.<span class="keyword">when</span> success callback <span class="keyword">return</span> another <span class="keyword">value</span></div><div class="line"></div><div class="line">// <span class="keyword">if</span>(iWantResolve = <span class="literal">false</span>) output:</div><div class="line">// $q.<span class="keyword">when</span> err callback function: commonJS reject</div><div class="line">// $q.<span class="keyword">when</span> <span class="keyword">then</span> function:undefined</div><div class="line"></div><div class="line">$q.<span class="keyword">when</span>(<span class="string">"some value"</span>, <span class="keyword">function</span> (data)&#123;</div><div class="line">    console.log(data);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// output: <span class="keyword">some</span> <span class="keyword">value</span></div></pre></td></tr></table></figure>
<h2 id="promise-chains-链式调用"><a href="#promise-chains-链式调用" class="headerlink" title="promise chains 链式调用"></a>promise chains 链式调用</h2><p>任何在 successCb, errCb 中返回的非 $q.reject()对象, 都将成为一个 resolve 的 promise.<br>所以可以出现如下语法<br><code>promise.then().then().then()</code></p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$q.when(<span class="string">"1"</span>)</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> &#123;</span></div><div class="line">        console.<span class="built_in">log</span>(data);</div><div class="line">        <span class="keyword">return</span> $q.reject(<span class="number">2</span>);</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> &#123;</span></div><div class="line">        console.<span class="built_in">log</span>(err);</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> &#123;</span></div><div class="line">        console.<span class="built_in">log</span>(data);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">// output: 1 2 3</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.angularjs.org/api/ng/service/$q" target="_blank" rel="external">AngularJS Documentation for $q</a></li>
<li><a href="http://www.cnblogs.com/asnowwolf/p/3689300.html" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></li>
<li><a href="http://www.syntaxsuccess.com/viewarticle/angular-promise-chaining-explained" target="_blank" rel="external">Angular Promise Chaining Explained</a></li>
<li><a href="http://www.bennadel.com/blog/2735-q-when-is-the-missing-q-resolve-method-in-angularjs.htm" target="_blank" rel="external">$q.when() Is The Missing $q.resolve() Method In AngularJS</a></li>
<li><a href="http://stackoverflow.com/questions/16770821/how-does-angular-q-when-work" target="_blank" rel="external">How does Angular $q.when work?</a></li>
<li><a href="https://github.com/angular/angular.js/issues/4493" target="_blank" rel="external">$q.when(promise) calls resolve() instead of reject()</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular-q-完全指南&quot;&gt;&lt;a href=&quot;#Angular-q-完全指南&quot; class=&quot;headerlink&quot; title=&quot;Angular $q 完全指南&quot;&gt;&lt;/a&gt;Angular $q 完全指南&lt;/h1&gt;&lt;p&gt;如果想使用 $http 或者其他异步操作, 那 $q 是必须要掌握的概念啦. Let’s get started!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="http://xiaoyu2er.github.io/tags/Angular/"/>
    
  </entry>
  
</feed>
